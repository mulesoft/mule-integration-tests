<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:test-oauth="http://www.mulesoft.org/schema/mule/test-oauth"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
               http://www.mulesoft.org/schema/mule/test-oauth http://www.mulesoft.org/schema/mule/test-oauth/current/mule-test-oauth.xsd">

    <http:listener-config name="listenerConfig">
        <http:listener-connection host="localhost" port="${callbackPort}" />
    </http:listener-config>

    <http:listener-config name="otherListenerConfig">
        <http:listener-connection host="localhost" port="${otherCallbackPort}" />
    </http:listener-config>

    <test-oauth:config name="oauth">
        <test-oauth:connection display="PAGE" immediate="true" prompt="false">
            <test-oauth:oauth-authorization-code consumerKey="${consumerKey}"
                                                 consumerSecret="${consumerSecret}"
                                                 authorizationUrl="${authorizationUrl}"
                                                 accessTokenUrl="${accessTokenUrl}"
                                                 scopes="${scopes}"
                                                 after="afterFlow" />
            <test-oauth:oauth-callback-config listenerConfig="listenerConfig"
                                              callbackPath="${callbackPath}"
                                              authorizePath="${localAuthPath}" />
        </test-oauth:connection>
    </test-oauth:config>

    <test-oauth:config name="otherOauth">
        <test-oauth:connection display="PAGE" immediate="true" prompt="false">
            <test-oauth:oauth-authorization-code consumerKey="${consumerKey}"
                                                 consumerSecret="${consumerSecret}"
                                                 authorizationUrl="${authorizationUrl}"
                                                 accessTokenUrl="${accessTokenUrl}"
                                                 scopes="${scopes}"
                                                 after="afterOtherFlow" />
            <test-oauth:oauth-callback-config listenerConfig="otherListenerConfig"
                                              callbackPath="${callbackPath}"
                                              authorizePath="${localAuthPath}" />
        </test-oauth:connection>
    </test-oauth:config>

    <flow name="getConnection">
        <test-oauth:get-connection config-ref="oauth"/>
    </flow>

    <flow name="afterFlow">
        <set-variable variableName="ownerId" value="#[payload.resourceOwnerId]"/>
        <test-oauth:capture-callback-payloads request="#[vars.authCodeRequest]" state="#[payload]" config-ref="oauth"/>
    </flow>

    <flow name="refreshToken">
        <test-oauth:token-expired config-ref="oauth"/>
    </flow>

    <flow name="unauthorize">
        <test-oauth:unauthorize config-ref="oauth"/>
    </flow>

    <flow name="getOtherConnection">
        <test-oauth:get-connection config-ref="otherOauth"/>
    </flow>

    <flow name="afterOtherFlow">
        <set-variable variableName="ownerId" value="#[payload.resourceOwnerId]"/>
        <test-oauth:capture-callback-payloads request="#[vars.authCodeRequest]" state="#[payload]" config-ref="otherOauth"/>
    </flow>

    <flow name="refreshOtherToken">
        <test-oauth:token-expired config-ref="otherOauth"/>
    </flow>

    <flow name="unauthorizeOther">
        <test-oauth:unauthorize config-ref="otherOauth"/>
    </flow>

</mule>
