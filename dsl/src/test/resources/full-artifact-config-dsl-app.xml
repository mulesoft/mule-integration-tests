<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:file="http://www.mulesoft.org/schema/mule/file"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:os="http://www.mulesoft.org/schema/mule/os"
      xmlns:sockets="http://www.mulesoft.org/schema/mule/sockets"
      xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
      xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd http://www.mulesoft.org/schema/mule/sockets http://www.mulesoft.org/schema/mule/sockets/current/mule-sockets.xsd">
    <configuration defaultErrorHandler-ref="referableHandler"/>

    <error-handler name="referableHandler">
        <on-error-continue enableNotifications="false" logException="false" type="MULE:SOURCE_RESPONSE">
            <logger level="TRACE"/>
        </on-error-continue>
    </error-handler>

    <os:object-store name="persistentStore"
                     entryTtl="1"
                     entryTtlUnit="HOURS"
                     maxEntries="10"
                     persistent="true"
                     expirationInterval="2"
                     expirationIntervalUnit="HOURS"
                     config-ref="persistentConfig"/>

    <os:config name="persistentConfig" />

    <file:config name="fileConfig">
        <file:connection/>
    </file:config>

    <wsc:config name="wscConfig">
        <expiration-policy maxIdleTime="1" timeUnit="MINUTES" />
        <wsc:connection address="http://www.webservicex.com/globalweather.asmx"
                        mtomEnabled="false"
                        port="GlobalWeatherSoap"
                        service="GlobalWeather"
                        soapVersion="SOAP11"
                        wsdlLocation="http://www.webservicex.com/globalweather.asmx?WSDL"/>
    </wsc:config>

    <db:config name="dbConfig">
        <db:derby-connection create="true" database="target/muleEmbeddedDB">
            <reconnection failsDeployment="true">
                 <reconnect count="1" frequency="0" />
            </reconnection>
            <db:pooling-profile maxPoolSize="10"/>
            <db:connection-properties>
                <db:connection-property key="first" value="propertyOne"/>
                <db:connection-property key="second" value="propertyTwo"/>
            </db:connection-properties>
        </db:derby-connection>
    </db:config>

    <http:listener-config basePath="/" name="httpListener">
        <http:listener-connection host="localhost" port="49019" protocol="HTTPS">
            <tls:context>
                <tls:key-store keyPassword="changeit" password="changeit" path="ssltest-keystore.jks"/>
                <tls:trust-store insecure="true"/>
                <tls:revocation-check>
                    <tls:standard-revocation-check onlyEndEntities="true"/>
                </tls:revocation-check>
            </tls:context>
        </http:listener-connection>
    </http:listener-config>

    <http:request-config name="httpRequester" requestStreamingMode="ALWAYS">
        <http:request-connection host="localhost" port="49020">
            <http:authentication>
                <http:basic-authentication password="pass" username="user"/>
            </http:authentication>
            <http:client-socket-properties>
                <sockets:tcp-client-socket-properties connectionTimeout="1000" keepAlive="true"
                                                      receiveBufferSize="1024" sendBufferSize="1024"
                                                      clientTimeout="1000" linger="1000" />
            </http:client-socket-properties>
        </http:request-connection>
        <http:default-headers>
            <http:default-header key="testDefault" value="testDefaultValue"/>
        </http:default-headers>
    </http:request-config>

    <flow doc:id="docUUID" initialState="stopped" name="testFlow">
        <http:listener config-ref="httpListener" doc:id="docUUID" path="testBuilder">
            <redelivery-policy maxRedeliveryCount="2" useSecureHash="true"/>
            <reconnect count="1" frequency="0"/>
            <http:response>
                <http:body><![CDATA[#[
                    %dw 2.0
                    output application/json
                    input payload application/xml
                    var baseUrl="http://sample.cloudhub.io/api/v1.0/"
                    ---
                    using (pageSize = payload.getItemsResponse.PageInfo.pageSize) {
                         links: [
                            {
                                href: fullUrl,
                                rel : "self"
                            }
                         ],
                         collection: {
                            size: pageSize,
                            items: payload.getItemsResponse.*Item map {
                                id: $.id,
                                type: $.type,
                                name: $.name
                            }
                         }
                    }
                ]]></http:body>
                <http:headers><![CDATA[#[{{'content-type' : 'text/plain'}}]]]></http:headers>
            </http:response>
        </http:listener>

        <choice>
            <when expression="#[true]">
                <db:bulk-insert>
                    <db:sql>INSERT INTO PLANET(POSITION, NAME) VALUES (:position, :name)</db:sql>
                    <db:parameter-types>
                        <db:parameter-type key="name" type="VARCHAR" />
                        <db:parameter-type key="position" type="INTEGER" />
                    </db:parameter-types>
                </db:bulk-insert>
            </when>
            <otherwise>
                <foreach collection="#[myCollection]">
                    <logger message="#[payload]"/>
                </foreach>
            </otherwise>
        </choice>

        <db:bulk-insert>
            <db:sql>INSERT INTO PLANET(POSITION, NAME) VALUES (:position, :name)</db:sql>
            <db:parameter-types>
                <db:parameter-type key="name" type="VARCHAR" />
                <db:parameter-type key="position" type="INTEGER" />
            </db:parameter-types>
        </db:bulk-insert>

        <http:request config-ref="httpRequester" method="POST" path="/nested"/>

        <db:insert config-ref="dbConfig">
            <db:sql>INSERT INTO PLANET(POSITION, NAME, DESCRIPTION) VALUES (777, 'Pluto', :description)</db:sql>
            <db:parameter-types>
                <db:parameter-type key="description" type="CLOB"/>
            </db:parameter-types>
            <db:input-parameters>
                #[{{'description' : payload}}]
            </db:input-parameters>
        </db:insert>

        <sockets:send-and-receive target="myVar" targetValue="#[message]">
            <repeatable-in-memory-stream bufferSizeIncrement="8"
                                         bufferUnit="KB"
                                         initialBufferSize="51"
                                         maxBufferSize="1000"/>
        </sockets:send-and-receive>

        <try>
            <wsc:consume operation="GetCitiesByCountry">
                <wsc:message>
                    <wsc:body>#[payload]</wsc:body>
                    <wsc:headers>#[{"headers": {con#headerIn: "Header In Value",con#headerInOut: "Header In Out Value"}]</wsc:headers>
                    <wsc:attachments>#[{}]</wsc:attachments>
                </wsc:message>
            </wsc:consume>
            <error-handler>
                <on-error-continue type="MULE:ANY">
                    <logger/>
                </on-error-continue>
                <on-error-propagate type="WSC:CONNECTIVITY" when="#[e.cause == null]"/>
            </error-handler>
        </try>
    </flow>

    <flow name="schedulerFlow">
        <scheduler>
            <scheduling-strategy>
                <fixed-frequency frequency="50" startDelay="20" timeUnit="SECONDS"/>
            </scheduling-strategy>
        </scheduler>
        <logger message="#[payload]"/>
    </flow>

    <flow name="cronSchedulerFlow">
        <scheduler>
            <scheduling-strategy>
                <cron expression="0/1 * * * * ?"/>
            </scheduling-strategy>
        </scheduler>
        <logger message="#[payload]"/>
    </flow>

    <flow name="fileListenerToObjectStore">
        <file:listener config-ref="fileConfig">
            <scheduling-strategy>
                <fixed-frequency frequency="1" timeUnit="MINUTES"/>
            </scheduling-strategy>
        </file:listener>
        <os:store failOnNullValue="#[vars.failOnNullValue]" key="key" objectStore="persistentStore">
            <os:value>
                #[payload]
            </os:value>
        </os:store>
    </flow>
</mule>
