<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <flow name="minimalConfig">
        <scatter-gather>
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <set-payload value="banana"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
        <flow-ref name="testRoutesMap"/>
    </flow>

    <flow name="minimalConfigCollectList">
        <scatter-gather>
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <set-payload value="banana"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
            <collect-list/>
        </scatter-gather>
        <flow-ref name="testRoutesList"/>
    </flow>

    <flow name="minimalConfigTarget">
        <scatter-gather target="result">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <set-payload value="banana"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
        <test:assert expression="#[vars.result != null]"/>
        <set-payload value="#[vars.result]"/>
        <flow-ref name="testRoutesMap"/>
    </flow>

    <flow name="minimalConfigTargetMessage">
        <scatter-gather target="result" targetValue="#[message]">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <set-payload value="banana"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
        <test:assert expression="#[vars.result != null]"/>
        <set-payload value="#[vars.result.payload]"/>
        <flow-ref name="testRoutesMap"/>
    </flow>

    <flow name="timeout">
        <scatter-gather timeout="1000">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <set-payload value="banana"/>
            </route>
            <route>
                <expression-component>java!java::lang::Thread::sleep(10000)</expression-component>
            </route>
        </scatter-gather>
    </flow>

    <flow name="routeWithException">
        <scatter-gather timeout="1000">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <test:processor throwException="true"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="routeWithExceptionWithMessage">
        <scatter-gather timeout="1000">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <test:processor throwException="true" exceptionText="I'm a message"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="routeWithNonMuleException">
        <scatter-gather timeout="1000">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <test:processor throwException="true" exceptionToThrow="java.lang.NullPointerException" exceptionText="nonMule"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="routeWithExpressionException">
        <scatter-gather timeout="1000">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <set-payload value="#[invalidExpr]"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="routeWithExceptionInSequentialProcessing">
        <scatter-gather maxConcurrency="1">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <test:processor throwException="true"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="sequentialProcessing">
        <scatter-gather maxConcurrency="1">
            <route>
                <set-payload value="apple"/>
                <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
            </route>
            <route>
                <set-payload value="banana"/>
                <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
            </route>
            <route>
                <set-payload value="orange"/>
                <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
            </route>
        </scatter-gather>

        <flow-ref name="testRoutesMap"/>
    </flow>

    <flow name="errorHandler">
        <scatter-gather timeout="1000">
            <route>
                <set-payload value="apple"/>
            </route>
            <route>
                <test:processor throwException="true"/>
            </route>
            <route>
                <test:processor throwException="true"/>
            </route>
        </scatter-gather>
        <error-handler>
            <on-error-continue type="COMPOSITE_ROUTING">
                <test:assert expression="#[mel:exception.cause.getClass().getName().equals('org.mule.runtime.core.privileged.routing.CompositeRoutingException')]"/>
                <test:assert expression="#[error.errorMessage.payload.failures['0'] == null]"/>
                <test:assert expression="#[error.errorMessage.payload.failures['1'] != null]"/>
                <test:assert expression="#[error.errorMessage.payload.failures['2'] != null]"/>
                <test:assert expression="#[error.errorMessage.payload.results['0'] != null]"/>
                <test:assert expression="#[error.errorMessage.payload.results['1'] == null]"/>
                <test:assert expression="#[error.errorMessage.payload.results['2'] == null]"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="variables">
        <set-variable variableName="var1" value="var"/>
        <set-variable variableName="var2" value="var"/>
        <scatter-gather>
            <route>
                <set-payload value="apple"/>
                <set-variable variableName="var2" value="newValue"/>
                <set-variable variableName="var3" value="var"/>
                <set-variable variableName="var4" value="val1"/>
            </route>
            <route>
                <set-payload value="banana"/>
                <set-variable variableName="var4" value="val2"/>
            </route>
            <route>
                <set-payload value="orange"/>
                <set-variable variableName="var4" value="val3"/>
            </route>
        </scatter-gather>

        <test:assert expression="#[vars.var1 == 'var']"/>
        <test:assert expression="#[vars.var2 == 'newValue']"/>
        <test:assert expression="#[vars.var3 == 'var']"/>
        <test:assert expression="#[vars.var4 == ['val1','val2','val3']]"/>
    </flow>

    <flow name="concurrent">
        <scatter-gather>
            <route>
                <flow-ref name="captureThreadAndWait" />
            </route>
            <route>
                <flow-ref name="captureThreadAndWait" />
            </route>
            <route>
                <flow-ref name="captureThreadAndWait" />
            </route>
        </scatter-gather>
    </flow>

    <flow name="dataType">
        <scatter-gather>
            <route>
                <set-payload value="apple" mimeType="text/plain"/>
            </route>
            <route>
                <set-payload value="banana"/>
            </route>
            <route>
                <set-payload value="orange"/>
            </route>
        </scatter-gather>
    </flow>

    <sub-flow name="assertFlowVars">
        <test:assert expression="#[vars.foo == 'bar']" />
    </sub-flow>

    <sub-flow name="captureThreadAndWait">
        <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
        <expression-component>mel:flowVars['latch'].await()</expression-component>
    </sub-flow>

    <sub-flow name="testRoutesMap">
        <test:assert expression="#[payload['0'].payload == 'apple']"/>
        <test:assert expression="#[payload['1'].payload == 'banana']"/>
        <test:assert expression="#[payload['2'].payload == 'orange']"/>
    </sub-flow>

    <sub-flow name="testRoutesList">
        <test:assert expression="#[payload[0].payload == 'apple']"/>
        <test:assert expression="#[payload[1].payload == 'banana']"/>
        <test:assert expression="#[payload[2].payload == 'orange']"/>
    </sub-flow>

</mule>
