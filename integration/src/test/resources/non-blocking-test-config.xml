<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <object name="customFilter" class="org.mule.test.core.NonBlockingFunctionalTestCase$CustomSecurityFilter"/>

    <configuration>
        <expression-language>
            <global-functions>
                def assertPayload(){payload == org.mule.tck.junit4.AbstractMuleContextTestCase.TEST_MESSAGE}
            </global-functions>
        </expression-language>
    </configuration>

    <flow name="flow" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="subFlow" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <flow-ref name="subFlowChild"/>
        <test:assert count="1"/>
    </flow>
    <sub-flow name="subFlowChild">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </sub-flow>

    <flow name="childFlow" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <flow-ref name="childFlowChild"/>
        <test:assert expression="#[payload == 'Test Message']"/>
        <test:assert count="1" expression="#[flow.name == 'childFlow']"/>
    </flow>
    <flow name="childFlowChild">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="childAsyncFlow" initialState="stopped">
        <flow-ref name="childAsyncFlowChild"/>
    </flow>
    <flow name="childAsyncFlowChild">
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="processorChain" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <processor-chain>
            <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
            <test:non-blocking-processor/>
        </processor-chain>
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="security-filter" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <custom-security-filter ref="customFilter"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="transformer">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[mel:assertPayload()]"/>
        <expression-transformer expression="#[true]"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[mel:assertPayload()]"/>
    </flow>

    <flow name="choice" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <choice>
            <when expression="#[true]">
                <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
                <test:non-blocking-processor/>
            </when>
        </choice>
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="async" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <async>
            <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
            <test:non-blocking-processor/>
        </async>
        <test:non-blocking-processor/>
    </flow>

    <flow name="catchExceptionStrategy" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <flow-ref name="catchExceptionStrategyChild"/>
        <test:assert count="1"/>
    </flow>
    <flow name="catchExceptionStrategyChild">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
                <test:non-blocking-processor/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="rollbackExceptionStrategy" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <flow-ref name="rollbackExceptionStrategyChild"/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>
    <flow name="rollbackExceptionStrategyChild">
        <flow-ref name="rollbackExceptionStrategyGrandChild"/>
        <test:assert count="0"/>
        <error-handler>
            <on-error-continue/>
        </error-handler>
    </flow>
    <flow name="rollbackExceptionStrategyGrandChild">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-propagate>
                <test:non-blocking-processor/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="nonTransactionalTry" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <try>
            <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
            <test:non-blocking-processor/>
        </try>
    </flow>

    <flow name="nonTransactionalTryErrorHandler" initialState="stopped">
        <try>
            <test:processor throwException="true"/>
            <error-handler>
                <on-error-continue>
                    <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
                    <test:non-blocking-processor/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="transactionalTry" initialState="stopped">
        <test:assert-intercepting responseSameTask="true" responseExpression="#[payload == 'Test Message']"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <test:assert-intercepting responseSameTask="true" responseExpression="#[payload == 'Test Message']"/>
            <test:non-blocking-processor/>
        </try>
    </flow>

    <flow name="transactionalTryErrorHandler" initialState="stopped">
        <try transactionalAction="ALWAYS_BEGIN">
            <test:processor throwException="true"/>
            <error-handler>
                <on-error-continue>
                    <test:assert-intercepting responseSameTask="true" responseExpression="#[payload == 'Test Message']"/>
                    <test:non-blocking-processor/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="childDefaultFlow" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <flow-ref name="childDefaultFlowChild"/>
        <test:assert expression="#[payload == 'Test Message']"/>
        <test:non-blocking-processor/>
    </flow>
    
    <flow name="childDefaultFlowChild">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']" message="2"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="untilSuccessfulNoRetry" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <until-successful>
            <test:non-blocking-processor/>
        </until-successful>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="untilSuccessfulNoRetryNonBlockingAfterScope" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <until-successful>
            <test:assert expression="#[payload == 'Test Message']"/>
        </until-successful>
        <test:non-blocking-processor/>
    </flow>

    <flow name="untilSuccessfulWithRetryExceptionBefore" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <until-successful millisBetweenRetries="100">
            <test:throw exception="java.lang.RuntimeException" error="ANY" count="2"/>
            <test:non-blocking-processor/>
        </until-successful>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="untilSuccessfulWithRetryExceptionAfter" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <until-successful millisBetweenRetries="100">
            <test:non-blocking-processor/>
            <test:throw exception="java.lang.RuntimeException" error="ANY" count="2"/>
        </until-successful>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="untilSuccessfulWithRetryNonBlockingAfterScope" initialState="stopped">
        <test:assert-intercepting responseSameTask="false" responseExpression="#[payload == 'Test Message']"/>
        <until-successful millisBetweenRetries="100">
            <test:throw exception="java.lang.RuntimeException" error="ANY" count="2"/>
        </until-successful>
        <test:non-blocking-processor/>
    </flow>

    <flow name="untilSuccessfulWithRetryTransactional" initialState="stopped">
        <test:assert-intercepting responseSameTask="true" responseExpression="#[payload == 'Test Message']"/>
        <until-successful millisBetweenRetries="100">
            <test:throw exception="java.lang.RuntimeException" error="ANY" count="2"/>
            <test:non-blocking-processor/>
        </until-successful>
        <test:assert expression="#[payload == 'Test Message']"/>
    </flow>

    <flow name="foreach" initialState="stopped">
        <test:assert-intercepting responseSameTask="false"/>
        <foreach>
            <test:assert-intercepting responseSameTask="false" count="2"/>
            <test:non-blocking-processor/>
            <foreach>
                <test:assert-intercepting responseSameTask="false" count="6"/>
                <test:non-blocking-processor/>
            </foreach>
        </foreach>
    </flow>

    <flow name="scatterGather" initialState="stopped">
        <test:assert-intercepting responseSameTask="false"/>
        <scatter-gather>
            <route>
                <test:assert-intercepting responseSameTask="false"/>
                <test:non-blocking-processor/>
            </route>
            <route>
                <test:assert-intercepting responseSameTask="false"/>
                <test:non-blocking-processor/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="splitAggregate" initialState="stopped">
        <test:assert-intercepting responseSameTask="false"/>
        <split-aggregate>
            <test:assert-intercepting responseSameTask="false" count="2"/>
            <test:non-blocking-processor/>
            <split-aggregate>
                <test:assert-intercepting responseSameTask="false" count="6"/>
                <test:non-blocking-processor/>
            </split-aggregate>
        </split-aggregate>
    </flow>

</mule>
