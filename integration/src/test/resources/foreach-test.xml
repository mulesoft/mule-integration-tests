<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
               http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <flow name="minimal-config" initialState="stopped">
        <foreach>
            <test:processor/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="minimal-config-plus-mp" initialState="stopped">
        <foreach>
            <test:processor/>
            <test:queue name="out"/>
        </foreach>
        <script:execute engine="groovy">
            <script:code>
            	payload.add("added after foreach")
            	result = payload
            </script:code>
        </script:execute>
    </flow>

    <flow name="minimal-config-expression" initialState="stopped">
        <foreach collection="#[vars.names]">
            <test:processor/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="partitioned-config" initialState="stopped">
        <foreach batchSize="${batch.size}">
            <test:processor/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="parent-message-config" initialState="stopped">
        <foreach rootMessageVariableName="parent">
            <test:processor/>
            <set-variable variableName="parent2" value="#[vars.parent]" />
        </foreach>
        <test:assert expression="#[payload == vars.parent2.payload]"/>
    </flow>

    <flow name="message-collection-config" initialState="stopped">
        <foreach>
            <test:assert expression="#[mel:message.outboundProperties['out']=='out'+counter]" />
            <set-variable variableName="totalMessages" value="#[vars.counter]"/>
        </foreach>
        <test:assert expression="#[vars.totalMessages==10]" />
    </flow>

    <flow name="map-config" initialState="stopped">
        <foreach collection="#[dw::core::Objects::entrySet(payload)]">
            <test:processor/>
            <set-variable variableName="totalMessages" value="#[vars.counter]" />
        </foreach>
        <test:assert expression="#[vars.totalMessages == 2]" />
    </flow>

    <flow name="map-expression-config" initialState="stopped">
        <foreach collection="#[mel:message.inboundProperties.names]">
            <test:processor/>
            <set-variable variableName="totalMessages" value="#[vars.counter]" />
        </foreach>
        <test:assert expression="#[vars.totalMessages == 3]"/>
    </flow>

    <flow name="process-order-update" initialState="stopped">
        <foreach collection="#[[ payload.PurchaseOrder.Items ]]">
            <set-variable variableName="total" value="#[vars.counter]" />
        </foreach>
    </flow>

    <flow name="process-json-update" initialState="stopped">
        <test:assert expression="#[sizeOf(payload.order.items) == 2]" />
        <foreach collection="#[payload.order.items]">
            <script:execute engine="groovy">
                <script:code>
                    <![CDATA[
                    def root = vars.rootMessage.payload.value
                    def key = "key3-" + vars.counter
                    root.order.items << [(key) : "je"]
                    ]]>
                </script:code>
            </script:execute>
        </foreach>
        <test:assert expression="#[mel:payload is Map]" />
        <test:assert expression="#[sizeOf(payload.order.items) == 4]" />
    </flow>

    <flow name="array-expression-config" initialState="stopped">
        <set-variable variableName="loops" value="0" />
        <foreach>
            <script:execute engine="groovy" target="loops">
                <script:code>
                    def loops = vars.loops.toInteger()
                    loops++
                    return loops + ""
                </script:code>
            </script:execute>
        </foreach>
        <test:assert expression="#[vars.loops == '3']" />
    </flow>

    <flow name="counter-scope" initialState="stopped">
        <foreach>
            <test:processor/>
        </foreach>
        <test:assert expression="#[vars.counter == null]"/>
    </flow>

    <flow name="counter-two-foreach-independence" initialState="stopped">
        <foreach>
            <test:processor/>
            <set-variable variableName="totalMessages" value="#[vars.counter]" />
        </foreach>
        <foreach>
            <test:processor/>
            <set-variable variableName="totalMessages" value="#[vars.counter]" />
        </foreach>
        <test:assert expression="#[vars.totalMessages == 3]"/>
    </flow>

    <flow name="nested-foreach" initialState="stopped">
        <foreach>
            <foreach>
                <test:processor/>
                <test:queue name="out"/>
            </foreach>
        </foreach>
    </flow>

    <flow name="nested-foreach-counters" initialState="stopped">
        <set-variable variableName="i" value="0"/>
        <foreach>
            <set-variable variableName="j" value="0"/>
            <foreach>
                <test:processor/>
                <test:assert expression="(vars.j as Number) + 1 == vars.counter"/>
                <set-variable variableName="j" value="#[vars.counter]"/>
                <test:queue name="out"/>
            </foreach>
            <test:assert expression="(vars.i as Number) + 1 == vars.counter"/>
            <set-variable variableName="i" value="#[vars.counter]"/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="foreach-properties-restored" initialState="stopped">
        <set-variable variableName="counter" value="hello" />
        <set-variable variableName="rootMessage" value="world" />
        <foreach>
            <test:processor/>
            <test:queue name="out"/>
        </foreach>
        <test:assert expression="#[vars.counter == 'hello']" />
        <test:assert expression="#[vars.rootMessage == 'world']" />
    </flow>

    <flow name="mvel-list" initialState="stopped">
        <foreach collection="#[mel:['foo', 'bar']]">
            <test:processor/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="mvel-map" initialState="stopped">
        <foreach collection="#[mel:['key1' : 'val1', 'key2':'val2']]">
            <test:processor/>
            <logger level="ERROR" message="message-#[vars.counter]: #[payload]"/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="mvel-collection" initialState="stopped">
        <foreach collection="#[mel:['key1' : 'val1', 'key2':'val2'].values()]">
            <test:processor/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="mvel-array" initialState="stopped">
        <foreach collection="#[mel:{'foo', 'bar'}]">
            <flow-ref name="assertIterable" />
        </foreach>
    </flow>

    <flow name="expression-iterable" initialState="stopped">
        <foreach collection="#[vars.iterable]">
            <flow-ref name="assertIterable" />
        </foreach>
    </flow>
    
    <sub-flow name="assertIterable">
        <test:processor/>
        <test:assert expression="#[mel:payload instanceof String]"  message="hoal"/>
        <logger level="ERROR" message="message-#[vars.counter]: #[payload]"/>
        <test:queue name="out"/>
    </sub-flow>
    
    <flow name="mvel-error" initialState="stopped">
        <foreach collection="#[vars.invalid]">
            <test:processor/>
        </foreach>
    </flow>
    
    <flow name="foreachWithAsync" initialState="stopped">
		<foreach>
			<async>
				<flow-ref name="setTestProperties" />
			</async>
		</foreach>
		<flow-ref name="setTestProperties" />
	</flow>

    <flow name="splitStringValueFromPayload" initialState="stopped">
        <foreach collection="#[payload splitBy '-']">
            <test:queue name="splitStringOutQueue"/>
        </foreach>
    </flow>

    <flow name="splitStringHardcodedValue" initialState="stopped">
        <foreach collection="#['a-b-c' splitBy '-']">
            <test:queue name="splitStringOutQueue"/>
        </foreach>
    </flow>

    <flow name="splitJson" initialState="stopped">
        <foreach collection="#[[ payload.name, payload.lastname ]]">
            <test:queue name="splitJsonOutQueue" contentJavaType="java.lang.String"/>
        </foreach>
    </flow>

    <flow name="splitJsonArray" initialState="stopped">
        <foreach>
            <test:queue name="splitJsonArrayOutQueue" contentJavaType="java.lang.String"/>
        </foreach>
    </flow>

    <flow name="splitJsonComplexValue" initialState="stopped">
        <foreach collection="#[vars.content.users]" batchSize="2">
            <foreach>
                <test:queue name="splitJsonComplexValueOutQueue" contentJavaType="java.lang.String">
                    <test:content>#["$(payload.name) $(payload.lastname)"]</test:content>
                </test:queue>
            </foreach>
        </foreach>
    </flow>

    <flow name="splitXml" initialState="stopped">
        <foreach collection="#[output application/java --- [ payload.person.name, payload.person.lastname ]]">
            <test:queue name="splitXmlOutQueue"/>
        </foreach>
    </flow>

    <flow name="splitXmlComplexValue" initialState="stopped">
        <foreach collection="#[payload.PurchaseOrder.Items]">
            <test:queue name="splitXmlComplexValueOutQueue" contentJavaType="java.lang.String">
                <test:content>#["$(payload.Item.@PartNumber) $(payload.Item.Price)"]</test:content>
            </test:queue>
        </foreach>
    </flow>

    <flow name="splitPayload" initialState="stopped">
        <foreach>
            <choice>
                <when expression="#[vars.useExpression]">
                    <test:queue name="splitPayloadOutQueue" contentJavaType="java.lang.String">
                        <test:content>#[payload.name]</test:content>
                    </test:queue>
                </when>
                <otherwise>
                    <test:queue name="splitPayloadOutQueue"/>
                </otherwise>
            </choice>
        </foreach>
    </flow>

    <flow name="error-handler" initialState="stopped">
        <foreach>
            <test:throw exception="java.io.IOException" error="CONNECTIVITY"/>
        </foreach>
        <error-handler>
            <on-error-continue type="CONNECTIVITY">
                <set-payload value="handled"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <sub-flow name="setTestProperties">
		<set-variable variableName="value1" value="value1" />
		<set-variable variableName="value2" value="value2" />

		<test:assert expression="#[vars.value1 == 'value1']" />
		<test:assert expression="#[vars.value2 == 'value2']" />

        <set-variable variableName="latchString" value="#[java!org::mule::test::routing::ForeachTestCase::coundDownLatch(vars['latch'])]" />
	</sub-flow>

    <sub-flow name="sub-flow-with-foreach">
        <foreach>
            <append-string-transformer message="y" />
        </foreach>
    </sub-flow>

    <flow name="nonBlocking" initialState="stopped">
        <set-variable variableName="work" value="" />

        <test:assert-intercepting responseSameTask="false"/>
        <foreach>
            <test:non-blocking-processor />
            <set-variable variableName="work" value="#[vars.work ++ payload]" />
        </foreach>
        <test:assert expression="#[vars.work == '0123456789']"/>
    </flow>

    <flow name="threadChange" initialState="stopped">
        <set-variable variableName="work" value="" />

        <test:assert-intercepting responseSameTask="false"/>
        <foreach>
            <test:processor processingType="CPU_INTENSIVE"/>
            <set-variable variableName="work" value="#[vars.work ++ payload]" />
        </foreach>
        <test:assert expression="#[vars.work == '0123456789']"/>
    </flow>

    <flow name="errorAfterThreadChange" initialState="stopped">
        <foreach>
            <test:processor processingType="CPU_INTENSIVE"/>
            <test:throw exception="java.io.IOException" error="CONNECTIVITY"/>
        </foreach>
    </flow>


</mule>
