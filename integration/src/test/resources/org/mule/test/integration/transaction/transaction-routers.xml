<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">

    <vm:config name="VM_Config">
        <vm:queues >
            <vm:queue queueName="Q1" />
            <vm:queue queueName="Q2" />
            <vm:queue queueName="Q3" />
        </vm:queues>
    </vm:config>

    <flow name="txParallelForeach">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="#[[p('firstValue'), p('otherValue')]]"/>
            <parallel-foreach>
                <logger message="#[payload]"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            </parallel-foreach>
        </try>
    </flow>

    <flow name="txParallelForeachInsideParallelForeach">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="#[[[p('firstValue'), p('otherValue')], [p('otherValue'), p('firstValue')]]]"/>
            <parallel-foreach>
                <parallel-foreach>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </parallel-foreach>
            </parallel-foreach>
        </try>
    </flow>

    <flow name="txParallelForeachWithErrors">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="#[[p('firstValue'), p('otherValue')]]"/>
            <parallel-foreach>
                <logger message="#[payload]"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <choice>
                    <when expression="#[payload == p('firstValue')]">
                        <raise-error type="APP:SOME" description="Error with ${firstValue}"/>
                    </when>
                </choice>
            </parallel-foreach>
            <error-handler>
                <on-error-continue type="COMPOSITE_ROUTING">
                    <set-payload value="#[error.errorMessage.payload.failures['0'].description]"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <set-payload value="#[error.errorMessage.payload.results['1'].payload]"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="txScatterGather">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="not relevant"/>
            <scatter-gather>
                <route>
                    <set-payload value="${firstValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </route>
                <route>
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </route>
            </scatter-gather>
        </try>
    </flow>

    <flow name="txScatterGatherWithErrors">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="not relevant"/>
            <scatter-gather>
                <route>
                    <set-payload value="${firstValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <raise-error type="APP:SOME" description="Error with ${firstValue}"/>
                </route>
                <route>
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </route>
            </scatter-gather>
            <error-handler>
                <on-error-continue type="COMPOSITE_ROUTING">
                    <set-payload value="#[error.errorMessage.payload.failures['0'].description]"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <set-payload value="#[error.errorMessage.payload.results['1'].payload]"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="txUntilSuccessful">
        <try transactionalAction="BEGIN_OR_JOIN">
            <set-payload value="${firstValue}"/>
            <until-successful maxRetries="2" millisBetweenRetries="100">
                <logger message="#[payload]"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <test:processor throwException="true"/>
            </until-successful>
            <error-handler>
                <on-error-continue>
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="txUntilSuccessfulOtherError">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <until-successful maxRetries="2" millisBetweenRetries="100">
                <logger message="#[payload]"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <test:processor throwException="true"/>
            </until-successful>
            <error-handler>
                <on-error-continue>
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <flow-ref name="txUntilSuccessful"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="txAsync">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <async>
                <logger message="#[payload]"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptorAsync"/>
            </async>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        </try>
    </flow>


    <flow name="flowRefWithoutTx">
        <set-payload value="${firstValue}"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <flow-ref name="flowWithTxSource"/>
    </flow>

    <flow name="flowRefWithTx">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="flowWithTxSource"/>
        </try>
    </flow>

    <flow name="flowWithTxSource">
        <vm:listener queueName="Q1" config-ref="VM_Config" transactionalAction="ALWAYS_BEGIN"/>
        <set-payload value="${otherValue}"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
    </flow>

    <flow name="toQueue">
        <vm:publish queueName="Q2" config-ref="VM_Config" />
    </flow>

    <flow name="flowWithTxSourceToFlowWithFlowRef">
        <vm:listener queueName="Q2" config-ref="VM_Config" transactionalAction="ALWAYS_BEGIN"/>
        <set-payload value="${otherValue}"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <flow-ref name="flowRefWithoutTx"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptorAsync"/>
    </flow>

    <flow name="flowRefToSubFlowWithTx">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="someSubFlow"/>
        </try>
    </flow>

    <sub-flow name="someSubFlow">
        <set-payload value="${otherValue}"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
    </sub-flow>

    <flow name="flowRefToFlowWithErrorTx">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="flow-with-error"/>
            <error-handler>
                <on-error-continue>
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="flowRefDynamicToFlowWithErrorTx">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <set-variable value="flow-with-error" variableName="flowName"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="#[vars.flowName]"/>
            <error-handler>
                <on-error-continue>
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="flow-with-error">
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <raise-error type="APP:SOME"/>
    </flow>

    <flow name="flowRefToFlowWithErrorAndOnErrorContinue">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="flow-with-error-handled"/>
            <set-payload value="${otherValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        </try>
    </flow>

    <flow name="flow-with-error-handled">
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <raise-error type="APP:SOME"/>
        <error-handler>
            <on-error-continue/>
        </error-handler>
    </flow>


    <flow name="flowRefToTxFlowWithError">
        <set-payload value="${firstValue}"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <flow-ref name="flow-with-error-tx"/>
        <error-handler>
            <on-error-continue>
                <set-payload value="${firstValue}"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            </on-error-continue>
        </error-handler>
    </flow>
    <flow name="flowRefToFlowWithErrorAndContinue">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="flowWithErrorAndContinue"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        </try>
    </flow>

    <flow name="flowWithErrorAndContinue">
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <raise-error type="APP:SOME"/>
        <error-handler>
            <on-error-continue>
                <set-payload value="${otherValue}"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="flow-with-error-tx">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${otherValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="#[vars.errorType]"/>
            <error-handler>
                <on-error-propagate type="APP:PROPAGATE">
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-propagate>
                <on-error-continue type="APP:CONTINUE">
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="raise-propagate-error">
        <raise-error type="APP:PROPAGATE"/>
    </flow>

    <flow name="raise-continue-error">
        <raise-error type="APP:CONTINUE"/>
    </flow>


    <flow name="flowRefToFlowWithErrorTxAndFlowRef">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <set-variable value="flow-with-error" variableName="flowName"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="#[vars.flowName]"/>
            <error-handler>
                <on-error-continue>
                    <set-payload value="${otherValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <set-payload value="${firstValue}"/>
                    <flow-ref name="flow-ok"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="flowRefToFlowWithErrorAndPropagate">
        <try transactionalAction="ALWAYS_BEGIN">
            <set-payload value="${firstValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="flowWithErrorAndPropagate"/>
            <error-handler>
                <on-error-continue>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="flow-ok">
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
    </flow>

    <flow name="nestedTries">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <try transactionalAction="BEGIN_OR_JOIN">
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <try transactionalAction="BEGIN_OR_JOIN">
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </try>
            </try>
        </try>
    </flow>

    <flow name="nestedTriesContinuesTx">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <try transactionalAction="INDIFFERENT">
                <set-payload value="${otherValue}"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            </try>
        </try>
    </flow>

    <flow name="nestedTriesWithIndifferentInTheMiddle">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <try transactionalAction="BEGIN_OR_JOIN">
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <try transactionalAction="INDIFFERENT">
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <try transactionalAction="INDIFFERENT">
                        <set-payload value="${otherValue}"/>
                        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    </try>
                </try>
            </try>
        </try>
    </flow>

    <flow name="flowWithTxSourceWithTryContinuesTx">
        <vm:listener queueName="Q3" config-ref="VM_Config" transactionalAction="ALWAYS_BEGIN"/>
        <set-payload value="${firstValue}"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <try>
            <set-payload value="${otherValue}"/>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        </try>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptorAsync"/>
    </flow>

    <flow name="toQueueFlowWithTxSourceWithTryContinuesTx">
        <vm:publish queueName="Q3" config-ref="VM_Config" />
    </flow>

    <flow name="flowWithErrorAndPropagate">
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <raise-error type="APP:SOME"/>
        <error-handler>
            <on-error-propagate>
                <set-payload value="${otherValue}"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="nestedTriesWithOnErrorPropagate">
        <try transactionalAction="ALWAYS_BEGIN">
            <try transactionalAction="BEGIN_OR_JOIN">
                <try>
                    <set-payload value="${firstValue}"/>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <raise-error type="APP:SOME"/>
                    <error-handler>
                        <on-error-propagate>
                            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                        </on-error-propagate>
                    </error-handler>
                </try>
                <error-handler>
                    <on-error-continue>
                        <set-payload value="${otherValue}"/>
                        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    </on-error-continue>
                </error-handler>
            </try>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        </try>
    </flow>

    <flow name="tryWithInnerTryWithOnErrorPropagate">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <try>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <raise-error type="APP:SOME"/>
                <error-handler>
                    <on-error-propagate>
                        <set-payload value="${otherValue}"/>
                        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    </on-error-propagate>
                </error-handler>
            </try>
            <error-handler>
                <on-error-continue>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="onErrorPropagateRaisesError">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <try>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <raise-error type="APP:SOME"/>
                <error-handler>
                    <on-error-propagate>
                        <set-payload value="${otherValue}"/>
                        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                        <raise-error type="APP:SOME2"/>
                    </on-error-propagate>
                </error-handler>
            </try>
            <error-handler>
                <on-error-continue>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="onErrorContinueRaisesError">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <try>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <raise-error type="APP:SOME"/>
                <error-handler>
                    <on-error-continue>
                        <set-payload value="${otherValue}"/>
                        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                        <raise-error type="APP:SOME2"/>
                    </on-error-continue>
                </error-handler>
            </try>
            <error-handler>
                <on-error-continue>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="onErrorContinueAndPropagateRaiseError">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <try>
                <try>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                    <raise-error type="APP:SOME"/>
                    <error-handler>
                        <on-error-propagate>
                            <set-payload value="${otherValue}"/>
                            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                            <raise-error type="APP:SOME2"/>
                        </on-error-propagate>
                    </error-handler>
                </try>
                <error-handler>
                    <on-error-continue>
                        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                        <raise-error type="APP:SOME2"/>
                    </on-error-continue>
                </error-handler>
            </try>
            <error-handler>
                <on-error-continue>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="tryWithinTryDoesNotFinishTx">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <try>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            </try>
            <try>
                <set-payload value="${otherValue}"/>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            </try>
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        </try>
    </flow>

    <flow name="flowRefToFlowWithErrorPropagateWithError">
        <set-payload value="${firstValue}"/>
        <try transactionalAction="ALWAYS_BEGIN">
            <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
            <flow-ref name="flowWithErrorInErrorHandler"/>
            <error-handler>
                <on-error-continue>
                    <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                </on-error-continue>
            </error-handler>
        </try>
    </flow>

    <flow name="flowWithErrorInErrorHandler">
        <set-payload value="${otherValue}"/>
        <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
        <raise-error type="APP:SOME"/>
        <error-handler>
            <on-error-propagate>
                <custom-processor class="org.mule.test.integration.transaction.TransactionsWithRoutersTestCase$ThreadCaptor"/>
                <raise-error type="APP:SOME2"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>