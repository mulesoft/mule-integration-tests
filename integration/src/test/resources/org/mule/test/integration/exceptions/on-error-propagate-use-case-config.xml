<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:test-components="http://www.mulesoft.org/schema/mule/test-components"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/test-components http://www.mulesoft.org/schema/mule/test-components/current/mule-test-components.xsd">

    <http:listener-config name="listenerConfig">
        <http:listener-connection host="localhost" port="${port}"/>
    </http:listener-config>

    <object name="call" class="org.mule.test.integration.exceptions.OnErrorPropagateTestCase$CallMessageProcessor"/>
    <object name="error" class="org.mule.test.integration.exceptions.OnErrorPropagateTestCase$ErrorProcessor"/>

    <test-components:queue-config name="custom1">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="any1">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="custom2">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="any">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="out">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="out1">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="out2">
        <test-components:connection />
    </test-components:queue-config>

    <flow name="onErrorPropagateTypeMatch">
        <set-payload value="#[payload ++ ' apt1']"/>
        <flow-ref name="raiseRoutingErrorFlow"/>
        <error-handler>
            <on-error-propagate type="REDELIVERY_EXHAUSTED">
                <test-components:queue-push config-ref="custom1"/>
            </on-error-propagate>
            <on-error-propagate type="ROUTING">
                <processor ref="call"/>
            </on-error-propagate>
            <on-error-propagate type="ANY">
                <test-components:queue-push config-ref="any1"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="onErrorPropagateTypeMatchAny">
        <set-payload value="#[payload ++ ' apt1']"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-propagate type="REDELIVERY_EXHAUSTED">
                <test-components:queue-push config-ref="custom2"/>
            </on-error-propagate>
            <on-error-propagate type="ANY">
                <processor ref="call"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="onErrorPropagateTypeMatchSeveral">
        <choice>
            <when expression="#[payload]">
                <set-payload value="#[payload ++ ' apt1']"/>
                <flow-ref name="raiseRoutingErrorFlow"/>
            </when>
            <otherwise>
                <set-payload value="#[payload ++ ' apt1']"/>
                <raise-error type="TRANSFORMATION"/>
            </otherwise>
        </choice>
        <error-handler>
            <on-error-propagate type="ROUTING,TRANSFORMATION">
                <processor ref="call"/>
            </on-error-propagate>
            <on-error-propagate type="ANY">
                <test-components:queue-push config-ref="any"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="onErrorPropagateTypeMatchNameWildcard">
        <choice>
            <when expression="#[payload]">
                <set-payload value="#[payload ++ ' apt1']"/>
                <flow-ref name="raiseRoutingErrorFlow"/>
            </when>
            <otherwise>
                <set-payload value="#[payload ++ ' apt1']"/>
                <raise-error type="TRANSFORMATION"/>
            </otherwise>
        </choice>
        <error-handler>
            <on-error-propagate type="MULE:*">
                <processor ref="call"/>
            </on-error-propagate>
            <on-error-propagate type="ANY">
                <test-components:queue-push config-ref="any"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="onErrorPropagateTypeMatchNamespaceWildcard">
        <choice>
            <when expression="#[payload]">
                <set-payload value="#[payload ++ ' apt1']"/>
                <flow-ref name="raiseRoutingErrorFlow"/>
            </when>
            <otherwise>
                <set-payload value="#[payload ++ ' apt1']"/>
                <raise-error type="TRANSFORMATION"/>
            </otherwise>
        </choice>
        <error-handler>
            <on-error-propagate type="*:ROUTING, *:TRANSFORMATION">
                <processor ref="call"/>
            </on-error-propagate>
            <on-error-propagate type="ANY">
                <test-components:queue-push config-ref="any"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="onErrorPropagateMessage">
        <set-payload value="#[payload ++ ' apt1']"/>
        <flow-ref name="raiseRoutingErrorFlow"/>
        <error-handler>
            <on-error-propagate>
                <set-payload value="propagated"/>
                <set-variable variableName="myVar" value="aValue" mimeType="text/plain"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="failingHandler">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-propagate>
                <processor ref="error"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="sourceResponseErrorHandler">
        <http:listener path="sourceError" config-ref="listenerConfig">
            <http:response statusCode="#['notANumber']"/>
        </http:listener>
        <set-payload value="#[payload ++ ' hey']"/>
        <error-handler>
            <on-error-propagate>
                <test-components:queue-push config-ref="out"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="raiseRoutingErrorFlow">
        <raise-error type="ROUTING" description="This is a routing error."/>
    </flow>

    <flow name="withTry">
        <set-payload value="flow"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-propagate>
                <test-components:queue-push config-ref="out1"/>
                <try>
                    <set-payload value="try"/>
                    <test:processor throwException="true"/>
                    <error-handler>
                        <on-error-continue>
                            <test-components:queue-push config-ref="out2"/>
                        </on-error-continue>
                    </error-handler>
                </try>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>
