<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
               http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

    <notifications>
        <notification event="MESSAGE-PROCESSOR"/>
    </notifications>

    <http:request-config name="requestConfig">
        <http:request-connection host="localhost"/>
    </http:request-config>

    <object name="notificationLogger" class="org.mule.test.core.context.notification.processors.ProcessorNotificationStore"/>

    <notifications>
        <notification-listener ref="notificationLogger"/>
    </notifications>

    <object name="objectStore" class="org.mule.runtime.core.api.store.SimpleMemoryObjectStore"/>

    <flow name="singleMP">
        <logger message="check"/>
    </flow>

    <flow name="singleMP2">
        <splitter/>
        <logger message="check"/>
    </flow>

    <flow name="singleMP3">
        <splitter/>
        <logger message="check"/>
        <logger message="check"/>
    </flow>

    <flow name="errorMidFlow">
        <logger message="check"/>
        <test:processor throwException="true"/>
        <logger message="check"/>
    </flow>

    <flow name="processorChain2">
        <processor-chain>
            <splitter/>
            <logger message="check1"/>
            <logger message="check2"/>
        </processor-chain>
    </flow>

    <flow name="processorChain3">
        <processor-chain>
            <splitter/>
            <logger message="check1"/>
        </processor-chain>
    </flow>

    <flow name="processorChain4">
        <processor-chain>
            <logger message="check1"/>
            <logger message="check2"/>
        </processor-chain>
        <logger message="check3"/>
    </flow>

    <flow name="processorChain">
        <processor-chain>
            <logger message="check1"/>
            <logger message="check2"/>
        </processor-chain>
    </flow>

    <flow name="customProcessor">
        <custom-processor class="org.mule.tck.testmodels.mule.TestMessageProcessor"/>
        <logger level="INFO"/>
    </flow>

    <flow name="choice">
        <choice>
            <when expression="payload == 'test1'">
                <logger message="check1"/>
            </when>
            <when expression="payload == 'test2'">
                <logger message="check2"/>
            </when>
            <otherwise>
                <logger message="check3"/>
            </otherwise>
        </choice>
    </flow>

    <flow name="choice2">
        <choice>
            <when expression="payload == 'test1'">
                <splitter/>
                <logger message="check"/>
            </when>
            <when expression="payload == 'test2'">
                <logger message="check"/>
            </when>
            <otherwise>
                <splitter/>
                <logger message="check"/>
            </otherwise>
        </choice>
    </flow>

    <flow name="scatterGather">
        <scatter-gather>
            <route>
                <logger message="check1"/>
            </route>
            <route>
                <logger message="check2"/>
                <logger message="check3"/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="foreach">
        <foreach collection="#[mel:{'one','two'}]">
            <logger/>
        </foreach>
        <logger message="Log after a scope"/>
    </flow>

    <flow name="enricher">
        <enricher>
            <append-string-transformer message="Hello"/>
            <enrich target="#[mel:message.outboundProperties.helloHeader]"/>
            <enrich target="#[mel:message.outboundProperties.helloHeader2]"/>
        </enricher>
        <enricher target="#[mel:message.outboundProperties.echoHeader]" source="#[payload]">
            <processor-chain>
                <logger/>
                <logger/>
            </processor-chain>
        </enricher>
    </flow>

    <flow name="until-successful">
        <until-successful>
            <test:queue name="out-us"/>
        </until-successful>
        <logger message="check1"/>
    </flow>

    <flow name="until-successful-with-processor-chain">
        <until-successful>
            <processor-chain>
                <logger message="check1"/>
                <test:queue name="out-us"/>
            </processor-chain>
        </until-successful>
        <logger message="check2"/>
    </flow>

    <flow name="until-successful-with-enricher">
        <until-successful>
            <processor-chain>
                <enricher source="#[payload]" target="#[payload]">
                    <append-string-transformer message="Hello"/>
                </enricher>
                <test:queue name="out-us"/>
            </processor-chain>
        </until-successful>
        <append-string-transformer message="Hello"/>
    </flow>

    <flow name="async">
        <async>
            <logger message="check1"/>
            <logger message="check2"/>
        </async>
    </flow>

    <flow name="idempotent-msg-filter">
        <idempotent-message-validator idExpression="#[id]" objectStore="objectStore"/>
        <logger level="INFO"/>
    </flow>

    <flow name="idempotent-secure-hash-msg-filter">
        <idempotent-message-validator idExpression="%dw 2.0
        output text/plain
        import dw::Crypto
        ---
        Crypto::SHA1(variables.id)" objectStore="objectStore"/>
        <logger level="INFO"/>
    </flow>

    <flow name="subflow">
        <logger/>
        <flow-ref name="subflow-call"/>
    </flow>

    <flow name="subflow2">
        <logger/>
        <flow-ref name="subflow-call"/>
        <logger/>
    </flow>

    <flow name="subflow/With/Slash">
        <logger/>
        <flow-ref name="subflow/call"/>
        <logger/>
    </flow>

    <sub-flow name="subflow-call">
        <splitter expression="#[mel:{'one'}]"/>
        <logger/>
    </sub-flow>

    <sub-flow name="subflow/call">
        <splitter expression="#[mel:{'one'}]"/>
        <logger/>
    </sub-flow>

    <flow name="catch-es">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <logger/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="rollback-es">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue type="REDELIVERY_EXHAUSTED">
                <logger/>
            </on-error-continue>
            <on-error-propagate>
                <logger/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="choice-es">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue type="REDELIVERY_EXHAUSTED">
                <logger/>
            </on-error-continue>
            <on-error-propagate when="#[mel:exception.causedBy(java.io.IOException)]">
                <logger/>
            </on-error-propagate>
            <on-error-continue>
                <logger message="continue"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="first-successful">
        <logger level="INFO"/>
        <first-successful>
            <route>
                <http:request path="weather-forecast" config-ref="requestConfig"/>
            </route>
            <route>
                <http:request path="weather-forecast" config-ref="requestConfig"/>
            </route>
            <route>
                <http:request path="weather-forecast" config-ref="requestConfig"/>
            </route>
            <route>
                <test:queue name="dead-letter-queue"/>
            </route>
        </first-successful>
    </flow>

    <flow name="round-robin">
        <round-robin>
            <route>
                <logger message="First-RRMP"/>
            </route>
            <route>
                <logger message="Second-RRMP"/>
            </route>
            <route>
                <logger message="Third-RRMP"/>
            </route>
        </round-robin>
        <logger level="INFO"/>
    </flow>

    <flow name="collectionAggregator">
        <splitter/>
        <logger level="INFO"/>
        <collection-aggregator failOnTimeout="false" timeout="3600"/>
    </flow>

    <flow name="chunkAggregator">
        <message-chunk-splitter messageSize="1"/>
        <logger message="1"/>
        <message-chunk-aggregator/>
        <logger message="2"/>
    </flow>
</mule>
