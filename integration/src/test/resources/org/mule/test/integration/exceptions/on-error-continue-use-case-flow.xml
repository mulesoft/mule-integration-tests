<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <http:listener-config name="listenerConfig">
        <http:listener-connection host="localhost" port="${port1}"/>
    </http:listener-config>
    <http:listener-config name="listenerConfigHttps">
        <http:listener-connection host="localhost" port="${port3}" protocol="HTTPS">
            <tls:context>
                <tls:key-store path="ssltest-keystore.jks" keyPassword="changeit" password="changeit" />
            </tls:context>
        </http:listener-connection>
    </http:listener-config>

    <object name="failing" class="org.mule.test.integration.exceptions.OnErrorContinueTestCase$FailingProcessor"/>
    <object name="error" class="org.mule.test.integration.exceptions.OnErrorContinueTestCase$ErrorProcessor"/>
    <object name="load-news" class="org.mule.test.integration.exceptions.OnErrorContinueTestCase$LoadNewsProcessor"/>
    <object name="news" class="org.mule.test.integration.exceptions.OnErrorContinueTestCase$NewsErrorProcessor"/>

    <flow name="httpContinueProcessingActualMessage">
        <http:listener path="service" config-ref="listenerConfig"/>
        <processor ref="load-news"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <processor ref="news"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="httpsContinueProcessingActualMessage">
        <http:listener config-ref="listenerConfigHttps" path="httpsservice"/>
        <processor ref="load-news"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <processor ref="news"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="continueProcessingActualMessage">
        <processor ref="load-news"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <processor ref="news"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="catchWithComponent">
      <test:processor throwException="true"/>
      <error-handler>
        <on-error-continue>
            <script:execute engine="groovy">
                <script:code>
                    return "$payload Caught"
                </script:code>
            </script:execute>
        </on-error-continue>
       </error-handler>
    </flow>

    <flow name="fullyDefinedCatchExceptionStrategyWithComponent">
        <set-payload value="#[payload ++ ' apt1']"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <set-payload value="#[payload ++ ' apt2']"/>
                <script:execute engine="groovy">
                    <script:code>
                        return "$payload groovified"
                    </script:code>
                </script:execute>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="onErrorTypeMatch">
        <set-payload value="#[payload ++ ' apt1']"/>
        <processor ref="failing"/>
        <error-handler>
            <on-error-continue type="EXPRESSION">
                <set-payload value="#[payload ++ ' nope']"/>
            </on-error-continue>
            <on-error-continue type="CONNECTIVITY">
                <set-payload value="#[payload ++ ' apt2']"/>
            </on-error-continue>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' nope2']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="onErrorTypeMatchAny">
        <set-payload value="#[payload ++ ' apt1']"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue type="EXPRESSION">
                <set-payload value="#[payload ++ ' nope']"/>
            </on-error-continue>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' apt2']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="onErrorTypeMatchSeveral">
        <choice>
            <when expression="#[payload]">
                <set-payload value="#[payload ++ ' apt1']"/>
                <processor ref="failing"/>
            </when>
            <otherwise>
                <set-payload value="#[payload ++ ' apt1']"/>
                <raise-error type="TRANSFORMATION"/>
            </otherwise>
        </choice>
        <error-handler>
            <on-error-continue type="TRANSFORMATION, CONNECTIVITY">
                <set-payload value="#[payload ++ ' apt2']"/>
            </on-error-continue>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' nope']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="onErrorTypeMatchNamespaceWildcard">
        <choice>
            <when expression="#[payload]">
                <set-payload value="#[payload ++ ' apt1']"/>
                <processor ref="failing"/>
            </when>
            <otherwise>
                <set-payload value="#[payload ++ ' apt1']"/>
                <expression-transformer expression="#[payload.nope]"/>
            </otherwise>
        </choice>
        <error-handler>
            <on-error-continue type="*:RETRY_EXHAUSTED, *:EXPRESSION">
                <set-payload value="#[payload ++ ' apt2']"/>
            </on-error-continue>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' nope']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="onErrorTypeMatchNameWildcard">
        <choice>
            <when expression="#[payload]">
                <set-payload value="#[payload ++ ' apt1']"/>
                <processor ref="failing"/>
            </when>
            <otherwise>
                <set-payload value="#[payload ++ ' apt1']"/>
                <expression-transformer expression="#[payload.nope]"/>
            </otherwise>
        </choice>
        <error-handler>
            <on-error-continue type="MULE:*">
                <set-payload value="#[payload ++ ' apt2']"/>
            </on-error-continue>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' nope']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="failingHandler">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <processor ref="error"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="sourceResponseErrorHandler">
        <http:listener path="sourceError" config-ref="listenerConfig">
            <http:response statusCode="#['notANumber']"/>
        </http:listener>
        <set-payload value="#[payload ++ ' hey']"/>
        <error-handler>
            <on-error-continue>
                <test:queue name="out"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="withTry">
        <set-payload value="flow"/>
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-continue>
                <test:queue name="out1"/>
                <try>
                    <set-payload value="try"/>
                    <test:processor throwException="true"/>
                    <error-handler>
                        <on-error-continue>
                            <test:queue name="out2"/>
                        </on-error-continue>
                    </error-handler>
                </try>
            </on-error-continue>
        </error-handler>
    </flow>

</mule>
