<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <flow name="checkEquals">
        <test:skeleton-source/>
        <test:throw exception="java.lang.RuntimeException" error="ANY"/>
        <error-handler>
            <test:on-error-check-log>
                <test:check-equals>
                    <![CDATA[
                        Message               : null.
                        Error type            : MULE:ANY
                        Element               : checkEquals/processors/0 @ LogCheckTestCase#runSuccessesNoVerboseExceptions:org/mule/test/integration/exceptions/log-check-config.xml:10
                        Element XML           : <test:throw exception="java.lang.RuntimeException" error="ANY"></test:throw>
                        (set debug level logging or '-Dmule.verbose.exceptions=true' for everything)
                    ]]>
                </test:check-equals>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="checkEqualsVerbose">
        <test:skeleton-source/>
        <test:throw exception="java.lang.RuntimeException" error="ANY"/>
        <error-handler>
            <test:on-error-check-log>
                <test:check-equals>
                    <![CDATA[
                        Message               : null.
                        Element               : checkEqualsVerbose/processors/0 @ LogCheckTestCase#runVerboseCheckEqualsVerbose:org/mule/test/integration/exceptions/log-check-config.xml:28
                        Element XML           : <test:throw exception="java.lang.RuntimeException" error="ANY"></test:throw>
                        Error type            : MULE:ANY
                        Payload               : null
                        Payload Type          : null
                    ]]>
                </test:check-equals>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="checkStacktrace">
        <test:skeleton-source/>
        <test:throw exception="java.lang.RuntimeException" error="ANY"/>
        <error-handler>
            <test:on-error-check-log>
                <test:check-stacktrace>
                    <test:method-call package="java.lang" class="Thread" method="run"/>
                    <test:cause exception="java.lang.RuntimeException"/>
                </test:check-stacktrace>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="checkSummary">
        <test:skeleton-source/>
        <test:throw exception="java.lang.RuntimeException" error="ANY"/>
        <error-handler>
            <test:on-error-check-log>
                <test:check-summary>
                    <test:summary-info key="Error type" value="MULE:ANY"/>
                </test:check-summary>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="unknownFiltered">
        <test:skeleton-source/>
        <test:processor throwException="true" exceptionToThrow="java.lang.NullPointerException"/>
        <error-handler>
            <test:on-error-check-log>
                <test:check-summary>
                    <test:summary-info key="Error type" value="MULE:UNKNOWN"/>
                </test:check-summary>
                <test:check-stacktrace>
                    <test:method-call package="reactor.core" method=""/>
                    <test:cause exception="java.lang.NullPointerException"/>
                </test:check-stacktrace>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="unknownFull">
        <test:skeleton-source/>
        <test:processor throwException="true" exceptionToThrow="java.lang.NullPointerException"/>
        <error-handler>
            <test:on-error-check-log>
                <test:check-summary>
                    <test:summary-info key="Error type" value="MULE:UNKNOWN"/>
                </test:check-summary>
                <test:check-stacktrace>
                    <test:method-call package="reactor.core.publisher" class="FluxHandle$HandleSubscriber" method="onNext"/>
                    <test:cause exception="java.lang.NullPointerException"/>
                </test:check-stacktrace>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="allChecksTogetherNoneFailing">
        <test:skeleton-source/>
        <test:throw exception="java.lang.RuntimeException" error="ANY"/>
        <error-handler>
            <test:on-error-check-log>
                <test:check-equals>
                    <![CDATA[
                        Message               : null.
                        Element               : allChecksTogetherNoneFailing/processors/0 @ LogCheckTestCase#runVerboseAllChecksTogetherNoneFailing:org/mule/test/integration/exceptions/log-check-config.xml:104
                        Element XML           : <test:throw exception="java.lang.RuntimeException" error="ANY"></test:throw>
                        Error type            : MULE:ANY
                        Payload               : null
                        Payload Type          : null
                    ]]>
                </test:check-equals>
                <test:check-summary>
                    <test:summary-info key="Error type" value="MULE:ANY"/>
                </test:check-summary>
                <test:check-stacktrace>
                    <test:method-call package="java.lang" class="Thread" method="run"/>
                    <test:cause exception="java.lang.RuntimeException"/>
                </test:check-stacktrace>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="exceptionInTry">
        <try>
            <try>
                <test:throw exception="org.mule.test.integration.exceptions.LogCheckTestCase.CustomException" error="ANY"/>
                <error-handler>
                    <test:on-error-check-log>
                        <test:check-equals>
                            <![CDATA[
                                Error
                            ]]>
                        </test:check-equals>
                    </test:on-error-check-log>
                </error-handler>
            </try>
        </try>
    </flow>

    <flow name="sameExceptionInTry">
        <try>
            <try>
                <test:throw exception="org.mule.test.integration.exceptions.LogCheckTestCase.CustomException" error="ANY"/>
                <error-handler>
                    <test:on-error-check-log propagate="true">
                        <test:check-equals>
                            <![CDATA[
                                Error
                            ]]>
                        </test:check-equals>
                    </test:on-error-check-log>
                </error-handler>
            </try>
            <error-handler>
                <test:on-error-check-log propagate="false" succeedIfNoLog="true"/>
            </error-handler>
        </try>
    </flow>

    <flow name="differentExceptionsInTry">
        <try>
            <try>
                <test:throw exception="org.mule.test.integration.exceptions.LogCheckTestCase.CustomException"
                            error="TRANSFORMATION"/>
                <error-handler>
                    <test:on-error-check-log propagate="false">
                        <test:check-equals>
                            <![CDATA[
                                    Error
                                ]]>
                        </test:check-equals>
                    </test:on-error-check-log>
                </error-handler>
            </try>
            <test:throw exception="org.mule.test.integration.exceptions.LogCheckTestCase.CustomException"
                        error="EXPRESSION"/>
            <error-handler>
                <test:on-error-check-log propagate="false">
                    <test:check-equals>
                        <![CDATA[
                               Error
                           ]]>
                    </test:check-equals>
                </test:on-error-check-log>
            </error-handler>
        </try>
    </flow>

    <flow name="noLogFlowFlagNotSet">
        <try>
            <test:throw exception="java.lang.AssertionError" error="TRANSFORMATION"/>
            <error-handler>
                <!--To log error-->
                <on-error-propagate/>
            </error-handler>
        </try>
        <error-handler>
            <test:on-error-check-log/>
        </error-handler>
    </flow>
    
    <flow name="noLogFlowFlagSet">
        <try>
            <test:throw exception="java.lang.AssertionError" error="TRANSFORMATION"/>
            <error-handler>
                <!--To log error-->
                <on-error-propagate/>
            </error-handler>
        </try>
        <error-handler>
            <test:on-error-check-log succeedIfNoLog="true"/>
        </error-handler>
    </flow>

    <flow name="noExceptionFlow">
        <test:processor/>
        <error-handler>
            <test:on-error-check-log succeedIfNoLog="true"/>
        </error-handler>
    </flow>

</mule>
