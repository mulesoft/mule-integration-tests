<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <object name="throw-exception" class="org.mule.test.integration.exceptions.ThrowExceptionProcessor"/>
    <object name="throw-error" class="org.mule.test.integration.exceptions.ErrorHandlerTestCase$ThrowErrorProcessor"/>

    <flow name="matchesHandlerUsingWhen" initialState="stopped">
        <test:processor/>
        <error-handler>
            <on-error-continue when="#[mel:exception.causedBy(java.lang.IllegalArgumentException)]">
                <set-payload value="#[payload ++ ' catch-1']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causedBy(java.lang.IllegalStateException)]">
                <set-payload value="#[payload ++ ' catch-2']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causedExactlyBy(org.mule.test.integration.exceptions.ErrorHandlerTestCase$BaseException)]">
                <set-payload value="#[payload ++ ' catch-3']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causedBy(org.mule.test.integration.exceptions.ErrorHandlerTestCase$SubtypeException)]">
                <set-payload value="#[payload ++ ' catch-4']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causeMatches('(.*?)mule.test.integration.(.*?).ErrorHandlerTestCase(.*?)MyException')]">
                <set-payload value="#[payload ++ ' catch-5']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:payload == 'groovy']">
                <set-payload value="#[payload ++ ' catch-6']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causeMatches('org.mule.test.integration.exceptions.ErrorHandlerTestCase\\$StartsWith(.*)')]">
                <set-payload value="#[payload ++ ' catch-7']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causeMatches('(.*?)FinishesWithException')]">
                <set-payload value="#[payload ++ ' catch-8']"/>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causeMatches('(.*?)FinishesWithSomethingElse')]">
		        <script:execute engine="groovy">
		            <script:code>
		                return "$payload groovified"
		            </script:code>
		        </script:execute>
            </on-error-continue>
            <on-error-continue when="#[mel:exception.causeMatches('.*') &amp;&amp; !exception.causedBy(java.lang.ArithmeticException) &amp;&amp; !exception.causedBy(org.mule.test.integration.exceptions.ErrorHandlerTestCase$GenericMuleException)]">
                <set-payload value="#[payload ++ ' catch-9']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="matchesHandlerUsingType" initialState="stopped">
        <processor ref="throw-exception"/>
        <error-handler>
            <on-error-continue type="TRANSFORMATION">
                <set-payload value="#[payload ++ ' transformation']"/>
            </on-error-continue>
            <on-error-continue type="EXPRESSION">
                <set-payload value="#[payload ++ ' expression']"/>
            </on-error-continue>
            <on-error-continue type="CONNECTIVITY">
                <set-payload value="#[payload ++ ' connectivity']"/>
            </on-error-continue>
            <on-error-continue type="ROUTING">
                <set-payload value="#[payload ++ ' routing']"/>
            </on-error-continue>
            <on-error-continue type="SECURITY">
                <set-payload value="#[payload ++ ' security']"/>
            </on-error-continue>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' any']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="propagatesCriticalErrors" initialState="stopped">
        <set-payload value="#[payload ++ ' critical']"/>
        <processor ref="throw-error"/>
        <error-handler>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' nope']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="propagatesErrorHandlingRoutingErrors" initialState="stopped">
        <flow-ref name="onErrorFails"/>
        <error-handler>
            <on-error-continue type="EXPRESSION">
                <set-payload value="#[payload ++ ' expression']"/>
            </on-error-continue>
            <on-error-continue type="ANY">
                <set-payload value="#[payload ++ ' any']"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="onErrorFails">
        <raise-error type="ROUTING"/>
        <error-handler>
            <on-error-propagate when="#[lookup('zaraza', payload)]">
                <set-payload value="#[payload ++ ' routing']"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>
