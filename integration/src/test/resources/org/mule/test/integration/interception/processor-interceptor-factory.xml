<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
    xmlns:test="http://www.mulesoft.org/schema/mule/test"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:http="http://www.mulesoft.org/schema/mule/http"
    xmlns:heisenberg="http://www.mulesoft.org/schema/mule/heisenberg"
    xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
    xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
               http://www.mulesoft.org/schema/mule/heisenberg http://www.mulesoft.org/schema/mule/heisenberg/current/mule-heisenberg.xsd
               http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
               http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">

    <configuration defaultErrorHandler-ref="globalErrorHandler" />

    <error-handler name="globalErrorHandler">
        <on-error-propagate>
            <logger message="error handled globally"/>
        </on-error-propagate>
    </error-handler>

    <http:request-config name="HTTP_Request_configuration"/>

    <heisenberg:config name="heisenberg" cancer="true" money="1000000" finalHealth="CANCER">
        <heisenberg:enemies>
            <heisenberg:enemy value="Gustavo Fring" />
            <heisenberg:enemy value="Hank" />
        </heisenberg:enemies>
        <heisenberg:monthly-incomes>
            <heisenberg:monthly-income value="12000" />
            <heisenberg:monthly-income value="500" />
        </heisenberg:monthly-incomes>
        <heisenberg:known-addresses>
            <heisenberg:known-address value="one address" />
        </heisenberg:known-addresses>
    </heisenberg:config>

    <flow name="killFromPayload">
        <heisenberg:kill goodbyeMessage="#[vars.goodbye]" />
    </flow>

    <flow name="killWithCustomMessage">
        <heisenberg:kill-with-custom-message victim="T-1000" goodbyeMessage="#[vars.goodbye]" />
    </flow>

    <flow name="executeOperationWithInvalidExpression">
        <heisenberg:kill-with-custom-message victim="T-1000" goodbyeMessage="#[iAmInvalid_notDW]" />
    </flow>

    <flow name="die">
        <heisenberg:die config-ref="heisenberg" />
    </flow>

    <flow name="callSaul">
        <heisenberg:call-saul config-ref="heisenberg" />
    </flow>

    <flow name="callGusFring">
        <heisenberg:call-gus-fring />
    </flow>

    <flow name="executeKillWithClient">
        <heisenberg:execute-remote-kill extension="HTTP" configName="HTTP_Request_configuration" operation="request" >
            <heisenberg:parameters>#[{'url': 'https://httpbin.org/status/200'}]</heisenberg:parameters>
        </heisenberg:execute-remote-kill>
    </flow>

    <flow name="flowFailingOperation">
        <heisenberg:cure-cancer />
    </flow>

    <flow name="flowFailingOperationFlowRef">
        <flow-ref name="flowFailingOperation"/>
    </flow>

    <flow name="flowUnknownStatusCodeHttpRequest">
        <http:request method="GET" config-ref="HTTP_Request_configuration" url="https://httpbin.org/status/418"/>
    </flow>

    <flow name="loggerWithTemplate">
        <logger message="Logging #[vars.v1]"/>
    </flow>

    <flow name="expressionsInInterception">
        <logger />
    </flow>

    <flow name="flowFailing">
        <raise-error type="TEST:EXPECTED"/>
    </flow>

    <flow name="flowRaise">
        <raise-error type="MULE:CONNECTIVITY" description="Expected error" />
    </flow>

    <flow name="flowFailingWithErrorHandler">
        <raise-error type="TEST:EXPECTED"/>
        <error-handler>
            <on-error-propagate>
                <logger message="error handled for flow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="flowWithFailingFlowRef">
        <flow-ref name="flowFailing" />
    </flow>

    <flow name="flowWithFailingSubFlowRef">
        <flow-ref name="failing-sub-flow" />
    </flow>

    <sub-flow name="failing-sub-flow">
        <raise-error type="TEST:EXPECTED"/>
    </sub-flow>

    <flow name="implicitConfigInNestedScope">
        <!-- Here, the validation:all is a quick way to get an SDK scope -->
        <validation:all>
            <validation:is-not-null value="#[&quot;NOT NULL&quot;]" />
        </validation:all>
    </flow>

    <flow name="operationWithChain">
        <heisenberg:tap-phones>
            <logger/>
        </heisenberg:tap-phones>
    </flow>

    <flow name="operationWithChainFailing">
        <heisenberg:tap-phones>
            <raise-error type="TEST:EXPECTED"/>
        </heisenberg:tap-phones>
        <error-handler>
            <test:on-error-check-log>
                <test:check-equals>
                    <![CDATA[
                        Message               : An error occurred.
                        Element               : operationWithChainFailing/processors/0/processors/0 @ ProcessorInterceptorFactoryChainTestCase#operationWithChainFailingLogsCorrectly:org/mule/test/integration/interception/processor-interceptor-factory.xml:133
                        Element DSL           : <raise-error type="TEST:EXPECTED"></raise-error>
                        Error type            : TEST:EXPECTED
                        FlowStack             : at operationWithChainFailing(operationWithChainFailing/processors/0/processors/0 @ ProcessorInterceptorFactoryChainTestCase#operationWithChainFailingLogsCorrectly:org/mule/test/integration/interception/processor-interceptor-factory.xml:133)
                        (set debug level logging or '-Dmule.verbose.exceptions=true' for everything)
                    ]]>
                </test:check-equals>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="interceptingScriptingParameters">
        <scripting:execute engine="Groovy" doc:name="Execute 5" target="scriptResult">
            <scripting:code ><![CDATA[return 5;]]></scripting:code>
        </scripting:execute>
    </flow>

</mule>
