<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
    xmlns:test="http://www.mulesoft.org/schema/mule/test"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:http="http://www.mulesoft.org/schema/mule/http"
    xmlns:heisenberg="http://www.mulesoft.org/schema/mule/heisenberg"
    xmlns:sc="http://www.mulesoft.org/schema/mule/module-using-core"
    xmlns:sc-using-sc="http://www.mulesoft.org/schema/mule/module-using-sc"
    xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
    xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
    xmlns:reconnection="http://www.mulesoft.org/schema/mule/reconnection"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
               http://www.mulesoft.org/schema/mule/heisenberg http://www.mulesoft.org/schema/mule/heisenberg/current/mule-heisenberg.xsd
               http://www.mulesoft.org/schema/mule/module-using-core http://www.mulesoft.org/schema/mule/module-using-core/current/mule-module-using-core.xsd
               http://www.mulesoft.org/schema/mule/module-using-sc http://www.mulesoft.org/schema/mule/module-using-sc/current/mule-module-using-sc.xsd
               http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
               http://www.mulesoft.org/schema/mule/reconnection http://www.mulesoft.org/schema/mule/reconnection/current/mule-reconnection.xsd
               http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">

    <configuration defaultErrorHandler-ref="globalErrorHandler" />

    <error-handler name="globalErrorHandler">
        <on-error-propagate>
            <logger message="error handled globally"/>
        </on-error-propagate>
    </error-handler>

    <http:request-config name="HTTP_Request_configuration"/>

    <heisenberg:config name="heisenberg" cancer="true" money="1000000" finalHealth="CANCER">
        <heisenberg:enemies>
            <heisenberg:enemy value="Gustavo Fring" />
            <heisenberg:enemy value="Hank" />
        </heisenberg:enemies>
        <heisenberg:monthly-incomes>
            <heisenberg:monthly-income value="12000" />
            <heisenberg:monthly-income value="500" />
        </heisenberg:monthly-incomes>
        <heisenberg:known-addresses>
            <heisenberg:known-address value="one address" />
        </heisenberg:known-addresses>
    </heisenberg:config>

    <flow name="killFromPayload">
        <heisenberg:kill goodbyeMessage="#[vars.goodbye]" />
    </flow>

    <flow name="killWithCustomMessage">
        <heisenberg:kill-with-custom-message victim="T-1000" goodbyeMessage="#[vars.goodbye]" />
    </flow>

    <flow name="executeOperationWithInvalidExpression">
        <heisenberg:kill-with-custom-message victim="T-1000" goodbyeMessage="#[iAmInvalid_notDW]" />
    </flow>

    <flow name="die">
        <heisenberg:die config-ref="heisenberg" />
    </flow>

    <flow name="callSaul">
        <heisenberg:call-saul config-ref="heisenberg" />
    </flow>

    <flow name="callGusFring">
        <heisenberg:call-gus-fring />
    </flow>

    <flow name="operationErrorWithMappings">
        <!-- This test uses http because the original issue couldn't be reproduced with heisenberg:call-gus-fring -->
        <http:request method="GET" config-ref="HTTP_Request_configuration" url="https://httpbin.org/status/404">
            <error-mapping sourceType="HTTP:NOT_FOUND" targetType="APP:MAPPED_CONNECTIVITY"/>
            <error-mapping targetType="APP:ANYTHING_ELSE" />
        </http:request>
    </flow>

    <flow name="executeKillWithClient">
        <heisenberg:execute-remote-kill extension="HTTP" configName="HTTP_Request_configuration" operation="request" >
            <heisenberg:parameters>#[{'url': 'https://httpbin.org/status/200'}]</heisenberg:parameters>
        </heisenberg:execute-remote-kill>
    </flow>

    <flow name="flowFailingOperation">
        <heisenberg:cure-cancer />
    </flow>

    <flow name="flowFailingOperationFlowRef">
        <flow-ref name="flowFailingOperation"/>
    </flow>

    <flow name="flowUnknownStatusCodeHttpRequest">
        <http:request method="GET" config-ref="HTTP_Request_configuration" url="https://httpbin.org/status/418"/>
    </flow>

    <flow name="loggerWithTemplate">
        <logger message="Logging #[vars.v1]"/>
    </flow>


    <flow name="expressionsInInterception">
        <logger />
    </flow>

    <flow name="scEchoOperationFlowRef">
        <flow-ref name="scEchoOperation"/>
    </flow>

    <flow name="scOperation">
        <sc:set-payload-hardcoded doc:name="mySCName"/>
    </flow>

    <flow name="scOperationInsideSubFlow">
        <flow-ref name="scOperationSubFlow"/>
    </flow>

    <sub-flow name="scOperationSubFlow">
        <sc:set-payload-hardcoded/>
    </sub-flow>

    <flow name="scEchoOperation">
        <sc:echo-set-payload echoMessage="#[vars.variable]" />
    </flow>

    <flow name="scUsingScOperation">
        <sc-using-sc:proxy-set-payload-hardcoded />
    </flow>

    <flow name="scFailingOperation">
        <sc:raise-error-op/>
    </flow>

    <flow name="scFailingOperationFlowRef">
        <flow-ref name="scFailingOperation"/>
    </flow>

    <flow name="flowFailing">
        <test:processor throwException="true"/>
    </flow>

    <flow name="flowRaise">
        <raise-error type="MULE:CONNECTIVITY" description="Expected error" />
    </flow>

    <flow name="flowFailingWithErrorHandler">
        <test:processor throwException="true"/>
        <error-handler>
            <on-error-propagate>
                <logger message="error handled for flow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="flowWithFailingFlowRef">
        <flow-ref name="flowFailing" />
    </flow>

    <flow name="flowWithFailingSubFlowRef">
        <flow-ref name="failing-sub-flow" />
    </flow>

    <sub-flow name="failing-sub-flow">
        <test:processor throwException="true"/>
    </sub-flow>

    <flow name="implicitConfigInNestedScope">
        <!-- Here, the validation:all is a quick way to get an SDK scope -->
        <validation:all>
            <validation:is-not-null value="#[&quot;NOT NULL&quot;]" />
        </validation:all>
    </flow>

    <flow name="flowWithChoiceRouter">
        <choice>
            <when expression="true">
                <sc:set-payload-hardcoded/>
            </when>
        </choice>
    </flow>

    <flow name="flowWithUntilSuccessfulScope">
        <until-successful maxRetries="0">
            <sc:set-payload-hardcoded/>
        </until-successful>
    </flow>

    <flow name="flowWithTryScope">
        <try>
            <sc:set-payload-hardcoded/>
        </try>
    </flow>

    <flow name="flowWithForeachScope">
        <foreach collection="[1]" batchSize="1" rootMessageVariableName="rootMessage" counterVariableName="counter">
            <sc:set-payload-hardcoded/>
        </foreach>
    </flow>

    <flow name="flowWithParallelForeachScope">
        <parallel-foreach collection="[1]"  maxConcurrency="2" target="rootMessage" targetValue="#[payload]" timeout="9223372036854775807">
            <sc:set-payload-hardcoded/>
        </parallel-foreach>
    </flow>

    <flow name="flowWithScatterGather">
        <scatter-gather>
            <route>
                <sc:set-payload-hardcoded/>
            </route>
            <route>
                <logger/>
            </route>
        </scatter-gather>
    </flow>

    <flow name="flowWithAsyncScope">
        <async>
            <sc:set-payload-hardcoded/>
        </async>
    </flow>

    <flow name="operationWithChain">
        <heisenberg:tap-phones>
            <logger/>
        </heisenberg:tap-phones>
    </flow>

    <flow name="operationWithChainFailing">
        <heisenberg:tap-phones>
            <raise-error type="TEST:EXPECTED"/>
        </heisenberg:tap-phones>
        <error-handler>
            <test:on-error-check-log>
                <test:check-equals>
                    <![CDATA[
                        Message               : An error occurred.
                        Element               : operationWithChainFailing/processors/0/processors/0 @ ProcessorInterceptorFactoryChainTestCase#operationWithChainFailingLogsCorrectly:org/mule/test/integration/interception/processor-interceptor-factory.xml:231
                        Element DSL           : <raise-error type="TEST:EXPECTED"></raise-error>
                        Error type            : TEST:EXPECTED
                        FlowStack             : at operationWithChainFailing(operationWithChainFailing/processors/0/processors/0 @ ProcessorInterceptorFactoryChainTestCase#operationWithChainFailingLogsCorrectly:org/mule/test/integration/interception/processor-interceptor-factory.xml:231)
                        (set debug level logging or '-Dmule.verbose.exceptions=true' for everything)
                    ]]>
                </test:check-equals>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="interceptingScriptingParameters">
        <scripting:execute engine="Groovy" doc:name="Execute 5" target="scriptResult">
            <scripting:code ><![CDATA[return 5;]]></scripting:code>
        </scripting:execute>
    </flow>

    <flow name="operationWithChainAndCallback">
        <heisenberg:tap-phones>
            <logger/>
        </heisenberg:tap-phones>
    </flow>

    <flow name="operationWithDeferredStreamParam">
        <!-- deferred=true means that the generated stream is not repeatable, to force the issue -->
        <set-variable variableName="door" value="#[%dw 2.0 output application/json deferred=true --- {'victim': 'Jim Malone', 'address': '1634 Racine Ave'}]"/>
        <heisenberg:knock knockedDoor="#[vars.door]"/>
    </flow>

    <reconnection:config name="reconnection_Config" configId="dsa" >
        <reconnection:connection>
            <reconnection >
                <reconnect count="4" frequency="50"/>
            </reconnection>
        </reconnection:connection>
    </reconnection:config>

    <reconnection:config name="reconnection_Config_fail" configId="dsa2" >
        <reconnection:connection>
            <reconnection >
                <reconnect count="1" frequency="50"/>
            </reconnection>
        </reconnection:connection>
    </reconnection:config>

    <flow name="reconnectionWorksWithInterceptors">
        <reconnection:get-retry-policy-template config-ref="reconnection_Config"/>
    </flow>

    <flow name="reconnectionFailureWorksWithInterceptors">
        <reconnection:get-retry-policy-template config-ref="reconnection_Config_fail"/>
    </flow>
</mule>
