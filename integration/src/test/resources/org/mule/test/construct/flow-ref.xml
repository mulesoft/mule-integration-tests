<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <object name="awaitLatchCpuIntensive" class="org.mule.test.construct.FlowRefTestCase$LatchAwaitCpuIntensiveProcessor"/>

    <http:listener-config name="listenerConfig">
        <http:listener-connection host="localhost" port="${port}"/>
    </http:listener-config>
    <http:request-config name="requestConfig">
        <http:request-connection host="localhost" port="${port}"/>
    </http:request-config>

    <flow name="flow1" initialState="stopped">
        <flow-ref name="sub-flow" />
        <flow-ref name="sub-flow" />
    </flow>

    <sub-flow name="sub-flow">
        <set-payload value="#[payload ++ '1']" />
        <set-payload value="#[payload ++ '2']" />
        <flow-ref name="composite1" />

        <set-payload value="#[payload ++ 'a']" />
        <set-payload value="#[payload ++ 'b']" />
        <set-payload value="#[payload ++ 'c']" />
        <set-payload value="#[payload ++ '3']" />

    </sub-flow>

    <sub-flow name="composite1">

        <set-payload value="#[payload ++ 'x']" />
        <set-payload value="#[payload ++ 'y']" />
        <set-payload value="#[payload ++ 'z']" />
    </sub-flow>

    <!-- 'Target' tests -->
    <flow name="targetToFlow" initialState="stopped">
        <flow-ref name="nestedTargetFlow" target="flowRefResult" targetValue="#[payload[0]]"/>
    </flow>

    <flow name="nestedTargetFlow">
        <flow-ref name="nestedTargetSubFlow"/>
    </flow>

    <flow name="targetToSubFlow" initialState="stopped">
        <flow-ref name="nestedTargetSubFlow" target="flowRefResult" targetValue="#[payload[0]]"/>
    </flow>

    <sub-flow name="nestedTargetSubFlow">
        <set-payload value="#[['result']]"/>
    </sub-flow>
    <!-- End 'Target' tests -->

    <flow name="flow2" initialState="stopped">
        <flow-ref name="#['sub-flow-' ++ vars.letter]" />
    </flow>

    <flow name="flow3" initialState="stopped">
        <flow-ref name="#['sub-flow-' ++ vars.letter replace ' ' with '']" />
    </flow>

    <sub-flow name="sub-flow-A">
        <set-payload value="#[payload ++ 'A']" />
    </sub-flow>

    <sub-flow name="sub-flow-B">
        <set-payload value="#[payload ++ 'B']" />
    </sub-flow>

    <sub-flow name="sub-flow-C">
        <choice>
            <when expression="#[true]">
                <set-payload value="#[payload ++ 'A']" />
            </when>
            <otherwise>
                <set-payload value="#[payload ++ 'B']" />
            </otherwise>
        </choice>
    </sub-flow>

    <sub-flow name="sub-flow-SG">
        <scatter-gather>
            <route>
                <set-payload value="#[payload ++ 'A']" />
            </route>
            <route>
                <set-payload value="#[payload ++ 'B']" />
            </route>
        </scatter-gather>
    </sub-flow>

    <flow name="httpEcho">
        <http:listener config-ref="listenerConfig" path="echo"/>
        <logger/>
    </flow>

    <flow name="flowRefFlowErrorNotifications" initialState="stopped">
        <flow-ref name="errorFlow"/>
    </flow>

    <flow name="errorFlow">
        <raise-error type="TEST:EXPECTED"/>
    </flow>

    <flow name="flowRefSubFlowErrorNotifications" initialState="stopped">
        <flow-ref name="errorSubFlow"/>
    </flow>

    <sub-flow name="errorSubFlow">
        <raise-error type="TEST:EXPECTED"/>
    </sub-flow>

    <!-- Infinite recursion handling -->

    <flow name="recursiveCaller" initialState="stopped">
        <set-variable variableName="level" value="#[0]" />
        <flow-ref name="recursive"/>
    </flow>
    <flow name="recursive">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="recursive"/>
    </flow>

    <flow name="recursiveDynamicCaller" initialState="stopped">
        <set-variable variableName="level" value="#[0]" />
        <flow-ref name="recursiveDynamic"/>
    </flow>
    <flow name="recursiveDynamic">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="#['recursiveDynamic']"/>
    </flow>

    <flow name="recursiveSubFlowCaller" initialState="stopped">
        <set-variable variableName="level" value="#[0]" />
        <flow-ref name="recursiveSubFlow"/>
    </flow>
    <sub-flow name="recursiveSubFlow">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="recursiveSubFlow"/>
    </sub-flow>

    <flow name="recursiveSubFlowDynamicCaller" initialState="stopped">
        <set-variable variableName="level" value="#[0]" />
        <flow-ref name="recursiveDynamicSubFlow"/>
    </flow>
    <sub-flow name="recursiveDynamicSubFlow">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="#['recursiveDynamicSubFlow']"/>
    </sub-flow>

    <!-- Back-pressure with flow-ref -->

    <flow name="backpressureFlowRefOuter">
        <http:listener config-ref="listenerConfig" path="backpressureFlowRef"/>

        <flow-ref name="#[attributes.queryParams.ref]"/>
    </flow>

    <flow name="backpressureFlowRefOuterMaxConcurrency" maxConcurrency="1">
        <http:listener config-ref="listenerConfig" path="backpressureFlowRefMaxConcurrency"/>

        <flow-ref name="#[attributes.queryParams.ref]"/>
    </flow>

    <flow name="backpressureFlowRefInner">
        <flow-ref name="awaitLatchCpuIntensive"/>
    </flow>
    <sub-flow name="backpressureFlowRefInnerSub">
        <flow-ref name="awaitLatchCpuIntensive"/>
    </sub-flow>

    <!-- Multiple recursive subflows -->

    <flow name="crossedRecursiveSubflow" initialState="stopped">
        <set-variable variableName="level" value="#[0]" />
        <flow-ref name="recurse1"/>
    </flow>

    <sub-flow name="recurse1">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="recurse2"/>
    </sub-flow>

    <sub-flow name="recurse2">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="recurse1"/>
    </sub-flow>

    <flow name="tripleCrossedRecursiveSubflow" initialState="stopped">
        <set-variable variableName="level" value="#[0]" />
        <flow-ref name="tripleRecurse1"/>
    </flow>

    <sub-flow name="tripleRecurse1">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="tripleRecurse2"/>
    </sub-flow>

    <sub-flow name="tripleRecurse2">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="tripleRecurse3"/>
    </sub-flow>

    <sub-flow name="tripleRecurse3">
        <set-variable variableName="level" value="#[vars.level + 1]" />
        <flow-ref name="tripleRecurse1"/>
    </sub-flow>

    <flow name="stoppedTargetFlow1" initialState="stopped">
        <flow-ref name="stoppedTargetFlow2"/>
        <set-payload value="#[payload ++ ' perre']"></set-payload>
    </flow>

    <flow name="stoppedTargetFlow2" initialState="stopped">
        <set-payload value="holis"></set-payload>
    </flow>

    <flow name="backpressureFlowRefOuterMaxConcurrencyStatic">
        <flow-ref name="backpressureFlowRefInnerMaxConcurrency"/>
    </flow>

    <flow name="backpressureFlowRefInnerMaxConcurrency" maxConcurrency="1">
        <choice>
            <when expression="#[java!org::mule::test::construct::FlowRefTestCase::getCallbackInFlight() >= 1]">
                <raise-error type="FR:CONCURRENT_EXECUTION"/>
            </when>
        </choice>

        <flow-ref name="awaitLatchCpuIntensive"/>
    </flow>

    <flow name="dynamicFlowRefWithSdkOperation">
        <!-- This first operation call is needed so that the SdkInternalContext for the event is initialized -->
        <http:request config-ref="requestConfig" path="/echo"/>
        <set-payload value="#[['apple', 'banana', 'orange']]"/>
        <foreach>
            <flow-ref name="#['dynamicFlowRefWithSdkOperationInner']"/>
        </foreach>
    </flow>

    <sub-flow name="dynamicFlowRefWithSdkOperationInner">
        <http:request config-ref="requestConfig" path="/echo"/>
    </sub-flow>

    <flow name="foreachWithFlowRefAndMaxConcurrency">
        <foreach>
            <flow-ref name="flowWithMaxConcurrency" />
        </foreach>
    </flow>

    <flow name="flowWithMaxConcurrency" maxConcurrency="1">
        <set-payload value="holis"></set-payload>
    </flow>

    <flow name="outerFlowWithMaxConcurrency">
        <flow-ref name="referencedFlowWithMaxConcurrency"/>
    </flow>

    <flow name="referencedFlowWithMaxConcurrency" maxConcurrency="1">
        <flow-ref name="backpressureFlowRefInner"/>
    </flow>

</mule>
