<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
               http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <custom-processor class="org.mule.test.construct.FlowConfigurationFunctionalTestCase.CustomAppender" name="appender"/>
    <custom-processor class="org.mule.test.construct.FlowConfigurationFunctionalTestCase.CustomAppender" name="test-array-appender"/>

    <sub-flow name="composite1">
        <description>Composite thats appands 'ayz'</description>
        <set-payload value="#[payload ++ 'x']" />
        <set-payload value="#[payload ++ 'y']" />
        <set-payload value="#[payload ++ 'z']" />
    </sub-flow>

    <flow name="flow">
        <set-payload value="#[payload ++ '1']" />
        <set-payload value="#[payload ++ '2']" />
        <processor ref="composite1" />
        <processor-chain>
            <set-payload value="#[payload ++ 'a']" />
            <set-payload value="#[payload ++ 'b']" />
            <set-payload value="#[payload ++ 'c']" />
        </processor-chain>
        <set-payload value="#[payload ++ '3']" />
    </flow>

    <flow name="asynchronousAsync" initialState="stopped">
        <async>
            <custom-processor class="org.mule.test.construct.FlowConfigurationFunctionalTestCase$ThreadSensingMessageProcessor"/>
            <test:queue name="asynchronous-async-out"/>
        </async>
    </flow>    

    <flow name="inout" initialState="stopped">
        <logger/>
        <test:queue name="inout-out"/>
    </flow>

    <flow name="inout-append" initialState="stopped">
        <set-payload value="#[payload ++ 'inout']" />
        <test:queue name="inout-append-out"/>
    </flow>
    
    <flow name="components" initialState="stopped">
        <logger/>
        <test:processor appendString="test"/>
    </flow>

    <flow name="async-oneway" initialState="stopped">
        <set-payload value="#[payload ++ 'a']" />
        <async>
            <set-payload value="#[payload ++ 'b']" />
            <test:queue name="async-async-oneway-out"/>
        </async>    
        <set-payload value="#[payload ++ 'c']" />    
        <test:queue name="async-oneway-out"/>
    </flow>

    <flow name="async-seda-oneway" initialState="stopped">
        <set-payload value="#[payload ++ 'a']" />
        <async>
            <set-payload value="#[payload ++ 'b']" />
            <test:queue name="async-async-seda-oneway-out"/>
        </async>    
        <set-payload value="#[payload ++ 'c']" />    
        <test:queue name="async-seda-oneway-out"/>
    </flow>

    <flow name="async-requestresponse" initialState="stopped">
        <set-payload value="#[payload ++ 'a']" />
        <async>
            <set-payload value="#[payload ++ 'b']" />
            <test:queue name="async-async-requestresponse-out"/>
        </async>    
        <set-payload value="#[payload ++ 'c']" />    
        <test:queue name="async-requestresponse-out"/>
    </flow>

    <flow name="async-tx" initialState="stopped">
        <set-payload value="#[payload ++ 'a']" />
        <async>
            <set-payload value="#[payload ++ 'b']" />
            <test:queue name="async-async-tx-out"/>
        </async>    
        <set-payload value="#[payload ++ 'c']" />    
        <test:queue name="async-tx-out"/>
    </flow>
    
    <flow name="choice2" initialState="stopped">
        <choice>
            <when expression="payload=='foo'">
                <set-payload value="#[payload ++ ' Hello']" />
                <set-payload value="#[payload ++ ' foo']" />
            </when>
            <when expression="#[payload=='bar']">
                <set-payload value="#[payload ++ ' Hello bar']" />
            </when>
            <otherwise>
                <set-payload value="#[payload ++ ' Hello']" />
                <set-payload value="#[payload ++ ' ?']" />
            </otherwise>
        </choice>
    </flow>
    
    <flow name="flow-ref" initialState="stopped">
        <flow-ref name="flow"/>
        <flow-ref name="flow"/>
    </flow>

    <flow name="loggermessage" initialState="stopped">
        <set-payload value="#[payload ++ ' Hello foo']" />
        <logger level="ERROR" category="mycategory"/>
    </flow>

    <flow name="loggerheader" initialState="stopped">
        <logger message="Ths is my header value: #[mel:message.inboundProperties.toLog]" level="ERROR" category="mycategory"/>
    </flow>

    <flow name="poll">
        <scheduler>
            <scheduling-strategy>
                <fixed-frequency frequency="3000"/>
            </scheduling-strategy>
        </scheduler>
        <set-payload value="#['']"/>
        <set-payload value="#[payload ++ ' Hello foo']" />
        <set-payload value="#[payload ++ 'out']" />
        <test:queue name="poll-out"/>
    </flow>

    <flow name="poll2">
        <scheduler>
            <scheduling-strategy>
                <fixed-frequency frequency="3000"/>
            </scheduling-strategy>
        </scheduler>
        <set-payload value="null" />
        <flow-ref name="pollappend"/>
        <set-payload value="#[payload ++ 'out']" />
        <test:queue name="poll2-out"/>
    </flow>

    <flow name="messagefiltersubflow" initialState="stopped">
        <choice>
            <when expression="#[false]">
                <test:throw exception="java.lang.RuntimeException" error="ROUTING"/>
            </when>
            <otherwise>
                <flow-ref name="invokedByMessageFilter"/>
            </otherwise>
        </choice>
    </flow>
     
    <sub-flow name="pollappend">
        <set-payload value="#[payload ++ 'pollappend']" />
    </sub-flow>

    <sub-flow name="invokedByMessageFilter">
        <test:queue name="messagefiltersubflow-out"/>
    </sub-flow>

    <flow name="customMaxConcurrency" maxConcurrency="1" initialState="stopped">
        <set-payload value="#[payload ++ 'nop']" />
    </flow>

</mule>
