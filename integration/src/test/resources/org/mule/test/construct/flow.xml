<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:spring="http://www.mulesoft.org/schema/mule/spring"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
               http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
               http://www.mulesoft.org/schema/mule/spring http://www.mulesoft.org/schema/mule/spring/current/mule-spring.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <spring:config name="springConfig" files="org/mule/test/construct/flow-beans.xml"/>

    <custom-processor class="org.mule.test.construct.FlowConfigurationFunctionalTestCase.CustomAppender" name="appender"/>
    <custom-processor class="org.mule.test.construct.FlowConfigurationFunctionalTestCase.CustomAppender" name="test-array-appender"/>

    <sub-flow name="composite1">
        <description>Composite thats appands 'ayz'</description>
        <append-string-transformer message="x" />
        <append-string-transformer message="y" />
        <append-string-transformer message="z" />
    </sub-flow>

    <flow name="flow">
        <append-string-transformer message="1" />
        <append-string-transformer message="2" />
        <processor ref="composite1" />
        <processor-chain>
            <append-string-transformer message="a" />
            <append-string-transformer message="b" />
            <append-string-transformer message="c" />
        </processor-chain>
        <append-string-transformer message="3" />
    </flow>

    <flow name="asynchronousAsync" initialState="stopped">
        <async>
            <custom-processor class="org.mule.test.construct.FlowConfigurationFunctionalTestCase$ThreadSensingMessageProcessor"/>
            <test:queue name="asynchronous-async-out"/>
        </async>
    </flow>    

    <flow name="inout" initialState="stopped">
        <logger/>
        <test:queue name="inout-out"/>
    </flow>

    <flow name="inout-append" initialState="stopped">
        <append-string-transformer message="inout" />
        <test:queue name="inout-append-out"/>
    </flow>

    <flow name="split-aggregate" initialState="stopped">
        <splitter expression="#[mel:payload.fruit]"/>
        <script:execute engine="groovy">
            <script:code>
                ((org.mule.tck.testmodels.fruit.Fruit)payload).bite();
                return payload;
            </script:code>
        </script:execute>
        <collection-aggregator />
        <test:queue name="split-aggregate-out"/>
    </flow>
    
    <flow name="split-no-parts" initialState="stopped">
        <splitter expression="#[output application/java --- payload..Order.item]"/>
    </flow>

    <flow name="split-aggregate-singleton-list" initialState="stopped">
        <splitter />
        <script:execute engine="groovy">
            <script:code>
                ((org.mule.tck.testmodels.fruit.Fruit)payload).bite();
                return payload;
            </script:code>
        </script:execute>
        <collection-aggregator />
        <test:queue name="split-aggregate-singleton-list-out"/>
    </flow>

    <flow name="split-aggregate-list" initialState="stopped">
        <splitter />
        <script:execute engine="groovy">
            <script:code>
                ((org.mule.tck.testmodels.fruit.Fruit)payload).bite();
                return payload;
            </script:code>
        </script:execute>
        <collection-aggregator />
        <test:queue name="split-aggregate-list-out"/>
    </flow>


    <flow name="split-aggregate-response-singleton-list" initialState="stopped">
        <splitter />
        <script:execute engine="groovy">
            <script:code>
                ((org.mule.tck.testmodels.fruit.Fruit)payload).bite();
                return payload;
            </script:code>
        </script:execute>
        <collection-aggregator />
    </flow>

    <flow name="split-aggregate-response-list" initialState="stopped">
        <splitter />
        <script:execute engine="groovy">
            <script:code>
                ((org.mule.tck.testmodels.fruit.Fruit)payload).bite();
                return payload;
            </script:code>
        </script:execute>
    </flow>

    <flow name="split-aggregate-map" initialState="stopped">
        <splitter/>
        <script:execute engine="groovy">
            <script:code>
                ((org.mule.tck.testmodels.fruit.Fruit)payload.getValue()).bite();
                return payload;
            </script:code>
        </script:execute>
    </flow>

    <flow name="split-filter-aggregate" initialState="stopped">
        <splitter expression="#[payload.fruit]" filterOnErrorType="VALIDATION:VALIDATION"/>
        <validation:is-true expression="#[payload.^class != 'org.mule.tck.testmodels.fruit.Banana' and payload.^class != 'org.mule.tck.testmodels.fruit.Orange']"/>
        <collection-aggregator failOnTimeout="false" timeout="1000" />
        <test:queue name="split-filter-aggregate-out"/>
    </flow>
    
    <flow name="message-chunk-split-aggregate" initialState="stopped">
        <message-chunk-splitter messageSize="20"/>
        <message-chunk-aggregator />
        <test:queue name="message-chunk-split-aggregate-out"/>
    </flow>

    <flow name="components" initialState="stopped">
        <logger/>
        <test:processor appendString="test"/>
    </flow>

    <flow name="async-oneway" initialState="stopped">
        <append-string-transformer message="a" />
        <async>
            <append-string-transformer message="b" />
            <test:queue name="async-async-oneway-out"/>
        </async>    
        <append-string-transformer message="c" />    
        <test:queue name="async-oneway-out"/>
    </flow>

    <flow name="async-seda-oneway" initialState="stopped">
        <append-string-transformer message="a" />
        <async>
            <append-string-transformer message="b" />
            <test:queue name="async-async-seda-oneway-out"/>
        </async>    
        <append-string-transformer message="c" />    
        <test:queue name="async-seda-oneway-out"/>
    </flow>

    <flow name="async-requestresponse" initialState="stopped">
        <append-string-transformer message="a" />
        <async>
            <append-string-transformer message="b" />
            <test:queue name="async-async-requestresponse-out"/>
        </async>    
        <append-string-transformer message="c" />    
        <test:queue name="async-requestresponse-out"/>
    </flow>

    <flow name="async-tx" initialState="stopped">
        <append-string-transformer message="a" />
        <async>
            <append-string-transformer message="b" />
            <test:queue name="async-async-tx-out"/>
        </async>    
        <append-string-transformer message="c" />    
        <test:queue name="async-tx-out"/>
    </flow>
    
    <flow name="choice2" initialState="stopped">
        <choice>
            <when expression="payload=='foo'">
                <append-string-transformer message=" Hello" />
                <append-string-transformer message=" foo" />
            </when>
            <when expression="#[payload=='bar']">
                <append-string-transformer message=" Hello bar" />
            </when>
            <otherwise>
                <append-string-transformer message=" Hello" />
                <append-string-transformer message=" ?" />
            </otherwise>
        </choice>
    </flow>
    
    <flow name="flow-ref" initialState="stopped">
        <flow-ref name="flow"/>
        <flow-ref name="flow"/>
    </flow>

    <flow name="invoke" initialState="stopped">
        <invoke object-ref="appender" method="transform" methodArguments="#[mel:payload]"/>
    </flow>

    <flow name="invoke2" initialState="stopped">
        <invoke object-ref="appender" method="transform" methodArguments="#[mel:message.inboundProperties.one]"/>
    </flow>
    
    <flow name="invoke3" initialState="stopped">
        <processor ref="invokeme"/>
    </flow>

    <flow name="invoke4" initialState="stopped">
        <processor ref="invokeme-noargs"/>
    </flow>
    
   	<flow name="invokeArrayInArgs" initialState="stopped">
        <invoke object-ref="test-array-appender" method="transformArray" methodArguments="#[['test', 'test']]"/>
    </flow>
    

    <invoke name="invokeme" object-ref="pojo" method="method" methodArguments="#[mel:'Account'] ,    #[mel:payload]"
        methodArgumentTypes="java.lang.String, java.lang.String" />

    <invoke name="invokeme-noargs" object-ref="pojo" method="method"/>


    <flow name="loggermessage" initialState="stopped">
        <append-string-transformer message=" Hello foo" />
        <logger level="ERROR" category="mycategory"/>
    </flow>

    <flow name="loggerheader" initialState="stopped">
        <logger message="Ths is my header value: #[mel:message.inboundProperties.toLog]" level="ERROR" category="mycategory"/>
    </flow>

    <flow name="poll">
        <scheduler>
            <scheduling-strategy>
                <fixed-frequency frequency="3000"/>
            </scheduling-strategy>
        </scheduler>
        <set-payload value="#['']"/>
        <append-string-transformer message=" Hello foo" />
        <append-string-transformer message="out" />
        <test:queue name="poll-out"/>
    </flow>

    <flow name="poll2">
        <scheduler>
            <scheduling-strategy>
                <fixed-frequency frequency="3000"/>
            </scheduling-strategy>
        </scheduler>
        <flow-ref name="pollappend"/>
        <append-string-transformer message="out" />
        <test:queue name="poll2-out"/>
    </flow>

    <flow name="messagefiltersubflow" initialState="stopped">
        <choice>
            <when expression="#[false]">
                <test:throw exception="java.lang.RuntimeException" error="ROUTING"/>
            </when>
            <otherwise>
                <flow-ref name="invokedByMessageFilter"/>
            </otherwise>
        </choice>
    </flow>
     
    <sub-flow name="pollappend">
        <append-string-transformer message="pollappend" />
    </sub-flow>

    <sub-flow name="invokedByMessageFilter">
        <test:queue name="messagefiltersubflow-out"/>
    </sub-flow>

    <flow name="customMaxConcurrency" maxConcurrency="1" initialState="stopped">
        <append-string-transformer message="nop" />
    </flow>

</mule>
