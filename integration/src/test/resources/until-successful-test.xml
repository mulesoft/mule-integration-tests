<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:test-components="http://www.mulesoft.org/schema/mule/test-components"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
               http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
               http://www.mulesoft.org/schema/mule/test-components http://www.mulesoft.org/schema/mule/test-components/current/mule-test-components.xsd">

    <object name="dlq-mp" class="org.mule.test.routing.UntilSuccessfulTestCase$CustomMP"/>
    <object name="wait-measure" class="org.mule.test.routing.UntilSuccessfulTestCase$WaitMeasure"/>

    <test-components:queue-config name="insideScope">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="untilSuccessful">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="exceptionStrategy">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="untilSuccessfulExpression">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="exceptionStrategyExpression">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="untilSuccessfulNoRetry">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="exceptionStrategyNoRetry">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="outerScope">
        <test-components:connection />
    </test-components:queue-config>

    <test-components:queue-config name="innerScope">
        <test-components:connection />
    </test-components:queue-config>

    <flow name="minimal-config">
        <!-- with this configuration, the response from target MP won't be considered an error -->
        <until-successful>
            <flow-ref name="target-mp" />
        </until-successful>
    </flow>

    <flow name="happy-path-scope">
        <set-payload value="pepa"></set-payload>
        <until-successful maxRetries="2" millisBetweenRetries="100">
            <test-components:queue-push config-ref="insideScope" />
            <set-payload value="pig"></set-payload>
        </until-successful>
    </flow>

    <flow name="scope-with-max-retry-expr-and-err-continue">
        <set-payload value="3"/>
        <set-payload value="chau"></set-payload>
        <until-successful maxRetries="#[vars.maxRetries + 1]" millisBetweenRetries="10">
            <set-payload value="holis"></set-payload>
        </until-successful>
    </flow>

    <flow name="full-config-with-mp">
        <async>
            <try>
                <until-successful maxRetries="2" millisBetweenRetries="100">
                    <flow-ref name="target-mp" />
                    <validation:is-false expression="#[payload matches /(?i).*error/]"/>
                </until-successful>
                <error-handler>
                    <on-error-continue type="RETRY_EXHAUSTED">
                        <flow-ref name="dlq-mp"/>
                    </on-error-continue>
                </error-handler>
            </try>
        </async>
        <set-payload value="#['ACK']"/>
    </flow>

    <flow name="concurrency-error-handling">
        <logger message="#['Running for ' ++ correlationId]"/>
        <until-successful maxRetries="1" millisBetweenRetries="100">
            <raise-error type="TEST:EXPECTED"/>
        </until-successful>
        <error-handler>
            <on-error-continue type="RETRY_EXHAUSTED">
                <flow-ref name="dlq-mp"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="retry-endpoint-config">
        <async>
            <until-successful maxRetries="2"
                              millisBetweenRetries="100">
                <flow-ref name="target-flow"/>
                <validation:is-false expression="#[payload matches /(?i).*error/]"/>
            </until-successful>
        </async>
    </flow>

    <flow name="target-mp">
        <test:processor appendString="ERROR"/>
    </flow>

    <flow name="target-flow">
        <flow-ref name="target-mp" />
    </flow>

    <flow name="synchronous">
        <until-successful millisBetweenRetries="100">
            <raise-error type="TEST:EXPECTED"/>
        </until-successful>
    </flow>

    <flow name="synchronous-with-retry">
        <until-successful maxRetries="3" millisBetweenRetries="0">
            <test-components:queue-push config-ref="untilSuccessful"/>
            <raise-error type="TEST:EXPECTED"/>
        </until-successful>
        <error-handler>
            <on-error-propagate type="RETRY_EXHAUSTED">
                <test-components:queue-push config-ref="exceptionStrategy"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="synchronous-with-expression-retry">
        <set-payload value="3"/>
        <until-successful maxRetries="#[payload + 2]" millisBetweenRetries="0">
            <test-components:queue-push config-ref="untilSuccessfulExpression"/>
            <raise-error type="TEST:EXPECTED"/>
        </until-successful>
        <error-handler>
            <on-error-propagate type="RETRY_EXHAUSTED">
                <test-components:queue-push config-ref="exceptionStrategyExpression"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="us-with-no-errors">
        <until-successful maxRetries="3" millisBetweenRetries="0">
            <set-payload value="#[payload ++ ' holis']"></set-payload>
        </until-successful>
        <error-handler>
            <on-error-propagate type="RETRY_EXHAUSTED">
                <set-payload value="chau"></set-payload>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="synchronous-without-retry">
        <until-successful maxRetries="0" millisBetweenRetries="0">
            <test-components:queue-push config-ref="untilSuccessfulNoRetry"/>
            <raise-error type="TEST:EXPECTED"/>
        </until-successful>
        <error-handler>
            <on-error-propagate type="RETRY_EXHAUSTED">
                <test-components:queue-push config-ref="exceptionStrategyNoRetry"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="measureSynchronousWait">
        <until-successful maxRetries="1" millisBetweenRetries="1000">
            <flow-ref name="wait-measure"/>
            <raise-error type="TEST:EXPECTED"/>
        </until-successful>
    </flow>

    <flow name="untilSuccessfulInErrorHandler">
        <raise-error type="APP:SOME"/>
        <error-handler>
            <on-error-continue>
                <until-successful>
                    <flow-ref name="dlq-mp"/>
                </until-successful>
                <set-payload value="hello"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="nestedUntilSuccessfulScopes">
        <until-successful maxRetries="1" millisBetweenRetries="10">
            <test-components:queue-push config-ref="outerScope"/>
            <until-successful maxRetries="2" millisBetweenRetries="10">
                <test-components:queue-push config-ref="innerScope"/>
                <raise-error type="TEST:EXPECTED"/>
            </until-successful>
        </until-successful>
        <error-handler>
            <on-error-continue>
                <set-payload value="holis"></set-payload>
            </on-error-continue>
        </error-handler>
    </flow>
</mule>
